
if (window && !window.__currentScriptPath) window.__currentScriptPath = null;


if (window) window.__currentScriptPath = "/v2/shoppingcart/scripts/PaymentMethodHandlers.js";

(function (__pkg) {
// ----- Payment Method Handlers ----- //
function __extendFunction() {
    var __base = arguments[0];
    var sub = arguments[1];

    sub.prototype = Object.create(__base.prototype);
__pkg.__export(sub);

    sub.prototype.constructor = sub;

    for (var i = 2; i < arguments.length; i ++) {
        var f = arguments[i];
        sub.prototype[f.name] = f;
    }

    return sub;
};

function DefaultPaymentMethodHandler() {
    this.paymentMethod = null;
};
// ----- Wallet Processor
__pkg.__export(DefaultPaymentMethodHandler);

DefaultPaymentMethodHandler.prototype.getWalletSettings = function(onCool, onFailed, indicator) {
    $shoppingCartService.getWalletSettings(onCool, onFailed, indicator);
};
DefaultPaymentMethodHandler.prototype.listPaymentMethods = function(onCool, onFailed, indicator) {
    $shoppingCartService.listPaymentMethods(this.paymentMethod, onCool, onFailed, indicator);
};
DefaultPaymentMethodHandler.prototype.buildPaymentMethodInput = function(cardToken) {
    var general = cardToken.card || cardToken.bank_account || {};
    var input = {
        paymentMethod: this.paymentMethod,
        token: cardToken.id,
        last4: general.last4,
        fullName: general.name,
    };
    if (cardToken.card) {
        input.address = cardToken.card.address_line1 + (cardToken.card.address_line1 ? (" " + cardToken.card.address_line1) : "");
        input.city = cardToken.card.address_city;
        input.state = cardToken.card.address_state;
        input.zip = cardToken.card.address_zip;
        input.expM = cardToken.card.exp_month;
        input.expY = cardToken.card.exp_year;
        input.brand = cardToken.card.brand;
    }
    if (cardToken.bank_account) {
        input.bankName = cardToken.bank_account.bank_name;
        input.accHolderTypeCode = cardToken.bank_account.account_holder_type;
        input.accAba = cardToken.bank_account.routing_number;
    }

    return input;
};
DefaultPaymentMethodHandler.prototype.addPaymentMethod = function(cardToken, metadata, onCool, onFailed, indicator) {
    var input = this.buildPaymentMethodInput(cardToken);
    $shoppingCartService.addPaymentMethod(input, metadata, onCool, onFailed, indicator);
};
DefaultPaymentMethodHandler.prototype.updatePaymentMethod = function(id, info, options, onCool, onFailed, indicator) {
    $shoppingCartService.updatePaymentMethod(id, info, options, onCool, onFailed, indicator);
};
DefaultPaymentMethodHandler.prototype.deletePaymentMethod = function(id, onCool, onFailed, indicator) {
    $shoppingCartService.deletePaymentMethod(id, onCool, onFailed, indicator);
};

// ----- Payment Processor
DefaultPaymentMethodHandler.prototype.canProcessPayment = function() {
    return false;
};

function CreditCardHandler() {
    this.paymentMethod = "CreditCard";
};
__extendFunction(DefaultPaymentMethodHandler, CreditCardHandler);

function ECheckHandler() {
    this.paymentMethod = "ECheck";
};
__extendFunction(DefaultPaymentMethodHandler, ECheckHandler);
__pkg.__export(ECheckHandler);

ECheckHandler.prototype.updatePaymentMethod = function(id, info, options, onCool, onFailed, indicator) {
    info = info || {};
    options = options || {};

    var bankAccount = (options && options.bank_account) || {};
    if (bankAccount) {
        if (!info.token) info.token = options.id;
        if (!info.last4) info.last4 = bankAccount.last4;
        if (!info.fullName) info.fullName = bankAccount.name;
    }

    DefaultPaymentMethodHandler.prototype.updatePaymentMethod.call(this, id, info, options, onCool, onFailed, indicator);
};

})(widget.__getNamespaceHolder("shoppingcart"));


if (window) window.__currentScriptPath = "/v2/shoppingcart/scripts/shopping-cart.js";

(function (__pkg) {
//__pkg.USE_THEME_COLOR = true;
__pkg.EVENT_NAME_COMMIT_ACTION_NAME_CHANGE = "sc:CommitActionNameChange";

var moduleClientHandlerMap = {};

__pkg.__export(function getModuleClientHandler(moduleId, callback) {
    if (moduleClientHandlerMap[moduleId]) {
        callback(moduleClientHandlerMap[moduleId]);
        return;
    }

    var module = __pkg.ModuleData.moduleMap[moduleId];
    var moduleClientHandlerName = module.clientHandlers.web;
    moduleClientHandlerName.match(/^([^:]+):(.+)$/);
    var ns = RegExp.$1;
    var name = RegExp.$2;

    widget.__ensureNamespaceLoaded(ns, function (pkg) {
        var f = pkg[name];
        var handler = new f();
        moduleClientHandlerMap[module.id] = handler;

        callback(handler);
    });
});

__pkg.__export(function ensureCartModulesLoaded(shoppingCart, callback) {
    var moduleIds = [];
    if (shoppingCart && shoppingCart.items) {
        shoppingCart.items.forEach(function (item) {
            if (moduleIds.indexOf(item.moduleId) < 0) moduleIds.push(item.moduleId);
        });
    }

    var index = -1;
    (function initNext() {
        index ++;
        if (index >= moduleIds.length) {
            callback();
            return;
        }

        var moduleId = moduleIds[index];
        __pkg.getModuleClientHandler(moduleId, function (handler) {
            initNext();
        });
    })();
});

__pkg.__export(function isInBackend() {
    return (typeof(AdminConsole) != "undefined" && AdminConsole.instance) ? true : false;
});

__pkg.__export(function launchShoppingPage(moduleId, shoppingCart, callback) {
    __pkg.getModuleClientHandler(moduleId, function (handler) {
        var entryPoints = handler.getShoppingPageEntryPoints(shoppingCart);
        if (__pkg.isInBackend()) {
            new __pkg.ViewDialog().callback(function () {

            }).open({
                title: __pkg.ModuleData.moduleMap[moduleId].displayName || "",
                viewClass: entryPoints.view,
                grabHeight: true,
                params: entryPoints.params || {}
            });
        } else {
            window.defaultIndicator.busy();
            window.location.href = entryPoints.url;
        }
    });
});
__pkg.__export(function findMemberData(shoppingCart, memberId, isNew) {
    var found = null;
    shoppingCart.members.every(function (member) {
        if (member.id == memberId && member["new"] == isNew) {
            found = member;
            return false;
        }
        return true;
    });

    return found;
});

__pkg.showChargeDetails = function (itemIds, shoppingCart, filter) {
    var total = 0;
    var allMessages = [];
    var scCharges =  [];
    var index = 0;
    var optionSelectionNeeded = false;
    var classWithRatePlan = {};
    
    shoppingCart.items.forEach(function (cartItem) {
        var detail = cartItem.moduleData.details[0];
        if (detail && detail.ratePlanId > 0) {
            classWithRatePlan[(cartItem.moduleId + "-" + cartItem.id)] = true;
        }
    });
    
    itemIds.forEach(function (itemId) {
        var item = null;
        for (var i = 0; i < shoppingCart.items.length; i++) {
            if (shoppingCart.items[i].id == itemId) {
                item = shoppingCart.items[i];
                optionSelectionNeeded || (optionSelectionNeeded = item.optionSelectionNeeded);
                break;
            }
        }
        index++;
        var charges = [];
        shoppingCart.moduleSummaries.forEach(function (summary) {
            summary.calculationResult.charges.forEach(function (charge) {
                if (scCharges.indexOf(charge) < 0 && charge.itemIds.indexOf(itemId) >= 0) {
                    scCharges.push(charge);
                    if (!filter || filter(charge, itemId)) charges.push(charge);
                }
            });
        });
        var messages = charges.map(function (charge) {
            var index = -1;
            var details = charge.chargeItems.map(function (chargeItem) {
                total += chargeItem.amount;
                index ++;
                return {
                    _name: "hbox",
                    style: index == 0 ? "" : " margin-top: 0.5em;",
                    _children: [
                        {
                            _name: "span",
                            _text: chargeItem.name + ":",
                            title: chargeItem.name,
                            style: (Util.isMobileUI() ? "width: 12em;" : "width: 30em; overflow: hidden; white-space: nowrap; text-overflow: ellipsis;") + "flex:1;"
                        },
                        {
                            _name: "hbox",
                            style: "justify-content: flex-end; align-items: center;",
                            _children: [{
                                            _name: "span",
                                            _text: __pkg.getDisplayAmountWithOption(chargeItem.amount, !item? false: item.optionSelectionNeeded),
                                            style: "min-width: 5em; text-align: right; color: " + (chargeItem.amount > 0 ? "#F00" : "#369") + "; margin-left: 1em;"
                                        }]
                        }
                    ]
                };
            });
            var usingRatePlan = classWithRatePlan[(charge.moduleId + "-" + charge.itemIds[0])];
            var nameElement = [Dom.strong(charge.name)];
            if (usingRatePlan) {
                nameElement.push({
                    _name: "icon",
                    "class": "clock",
                    style: "font-size: 1.5em; margin-left: 0.5em; color: #469ADB;"
                });
            }
            return {
                _name: "vbox",
                moduleId: charge.moduleId,
                itemId: itemId,
                index: index,
                _children: [
                    {
                        _name: "hbox",
                        style: "align-items: center;",
                        _children: nameElement
                    },
                    {
                        _name: "vbox",
                        style: "margin-left: 1em; margin-top: 0.5em;",
                        _children: details
                    }
                ]
            };
        });

        allMessages = allMessages.concat(messages);
    });
    var hashCode = function(text) {
        var hash = 0, i, chr;
        if (text.length === 0) return hash;
        for (i = 0; i < text.length; i++) {
            chr = text.charCodeAt(i);
            hash = ((hash << 5) - hash) + chr;
            hash |= 0;
        }
        return hash;
    };
    allMessages = allMessages.sort(function(a, b){
        var v1 = a.itemId + a.index + hashCode(a.moduleId);
        var v2 = b.itemId + b.index + hashCode(b.moduleId);
        return v1 - v2;
    });
    if (allMessages.length > 1) {
        for (var i = 1; i < allMessages.length; i++) {
            var m = allMessages[i];
            m.style = "margin-top: 1em; border-top: solid 1px #CCC; padding-top: 1em";
        }
    }
    var summary = {
        _name: "hbox",
        style: "font-weight: bold; margin-top: 0.5em; padding-top: 0.5em; border-top: solid 1px #CCC; justify-content: flex-end;",
        _children: [
            {
                _name: "strong",
                _text: "TOTAL:",
                style: (Util.isMobileUI() ? "width: 12em;" : "") + "flex: 1; text-align: right;"
            },
            {
                _name: "span",
                _text: __pkg.getDisplayAmountWithOption(total, optionSelectionNeeded),
                style: "min-width: 5em; text-align: right; color: #F00; margin-left: 1em;"
            }
        ]
    };
    allMessages.push(summary);

    Dialog.alertHtmlMessage("Charge Details", allMessages);
};

__pkg.__export(function getDisplayAmountWithOption(amount, optionSelectionNeeded) {
    if (optionSelectionNeeded) {
        var alternativeCost = ((window.LOCALE && window.LOCALE.currencySign) || "$") + "--";
        return  (amount > 0 ? (Util.toCurrency(amount) + " + ") : "") + alternativeCost;  
    }
    return Util.toCurrency(amount);
    
});
        
__pkg.STORAGE_KEY_LAST_MODULE_ID = "sc:storage_key_last_module_id";

})(widget.__getNamespaceHolder("shoppingcart"));


if (window) window.__currentScriptPath = "/v2/shoppingcart/widgets/steps/CheckoutAgreementStep.js";

(function (__pkg) {
function CheckoutAgreementStep() {
    BaseTemplatedWidget.call(this);
    // disable class mode
    /*
    if (localStorage.getItem(this._getStorageKey()) == "ClassMode") {
        this.memberModeInput.checked = false;
        this.classModeInput.checked = true;
    }
    */
    this.memberModeInput.checked = true;
    this.invalidateDisplayMode();
    this._setup();
}
__extend(BaseTemplatedWidget, CheckoutAgreementStep);

CheckoutAgreementStep.prototype._setup = function () {
    this._cartUpdatedEventListener = function (event) {
        if (this._reloading) return;
        this._reload();
    }.bind(this);

    var thiz = this;

    var waiverPopulator = function (data, binding, node, index) {
        if (data._fake) {
            node.innerHTML = "";
            Dom.addClass(node, "Fake");
            return;
        }
        Dom.setInnerText(binding.waiverName, data.title);
        binding.waiverContent.innerHTML = data.content;
        binding.waiverContent.innerHTML = Dom.getInnerText(binding.waiverContent);
        binding.waiverSigninLabel.setAttribute("for", binding.waiverSigninCheckbox.id);

        Dom.toggleClass(node, "Required", data.required ? true : false);
        var agreementKey  = data.key;
        var agreementId = data.id;
        var moduleDataId = data.moduleDataId;
        var moduleId = data.moduleId;
        var p = Dom.findParentWithClass(node, "MemberContainer");
        if (p) {
            var m = p.querySelector(".AnonId_memberName");
            if (m) {
                var existingMemberId = m.getAttribute("existing-member-id");
                var newMemberId = m.getAttribute("new-member-id");
                binding.waiverSigninCheckbox.setAttribute("existing-member-id", existingMemberId);
                binding.waiverSigninCheckbox.setAttribute("new-member-id", newMemberId);
                var key = existingMemberId > 0? ("E" + existingMemberId) : ("N" + newMemberId);
                var signedInfo = (thiz._signedWaiverIndexMap[key] && thiz._signedWaiverIndexMap[key][agreementKey])? thiz._signedWaiverIndexMap[key][agreementKey] : null;
                var existingSignedId = (signedInfo && signedInfo.memberSignedAgreementId >= 0)? signedInfo.memberSignedAgreementId : -1;
                var signedWaiverIndex = (signedInfo && signedInfo.signedWaiverIndex >= 0)? signedInfo.signedWaiverIndex : -1;
                if (existingSignedId > 0 && signedWaiverIndex == data.id) {
                    binding.waiverSigninCheckbox.setAttribute("disabled", "true");
                    Dom.toggleClass(node, "Signed", true);
                    binding.waiverSigninCheckbox.checked = true;
                }
                if (existingSignedId == 0 && signedWaiverIndex == data.id) {
                    Dom.toggleClass(node, "Signed", true);
                    binding.waiverSigninCheckbox.checked = true;
                }
                if (existingSignedId == 0 && signedWaiverIndex != data.id) {
                    InfoTip.show(node, "This agreement was changed. Please read and re-sign it.", true, null, "error");
                }
                if (existingSignedId > 0) binding.waiverSigninCheckbox.setAttribute("member-signed-agreement-id", existingSignedId);
            }
        }

        binding.waiverSigninCheckbox.setAttribute("agreement-key", agreementKey);
        binding.waiverSigninCheckbox.setAttribute("agreement-id", agreementId);
        binding.waiverSigninCheckbox.setAttribute("module-data-id", moduleDataId);
        binding.waiverSigninCheckbox.setAttribute("module-id", moduleId);
        node._waiverInfo = data;
    };

    this.classRepeaterView.populator = function (data, binding, node, index) {
        binding.waiverRepeaterView.populator = waiverPopulator;
        binding.waiverRepeaterView.fakeItemCount = 5;

        Dom.setInnerText(binding.className, data.className);
        binding.waiverRepeaterView.setItems(data.waiverItems);
    };

    this.memberRepeaterView.populator = function (data, binding, node, index) {
        binding.waiverRepeaterView.populator = waiverPopulator;
        binding.waiverRepeaterView.fakeItemCount = 5;
        Dom.setInnerText(binding.memberName, data.memberName);
        Dom.setInnerText(binding.registrationTitles, data.registrationTitles.join(", "));
        binding.memberName.setAttribute("existing-member-id", data.existingMemberId);
        binding.memberName.setAttribute("new-member-id", data.newMemberId);
        binding.waiverRepeaterView.setItems(data.waiverItems);
    };

    this.bind("click", this._handleClick, this.node());
};
CheckoutAgreementStep.prototype.onAttached = function () {
    if (!this._eventsRegistered) {
        this._eventsRegistered = true;
        CommonEvent.listener("shoppingcart", "CartUpdated", this._cartUpdatedEventListener);
    }
};

CheckoutAgreementStep.prototype.onDetached = function () {
    if (this._eventsRegistered) {
        this._eventsRegistered = false;
        CommonEvent.removeEvent("shoppingcart", "CartUpdated", this._cartUpdatedEventListener);
    }
}

CheckoutAgreementStep.prototype.init = function (step, checkoutInfo, wizardAPI) {
    this._step = step;
    this._wizardAPI = wizardAPI;
    this._checkoutInfo = checkoutInfo;

    this._reload();
};

CheckoutAgreementStep.prototype._reload = function () {
    this._reloading = true;
    var thiz = this;

    $shoppingCartService.getWaiverSigningInfo(thiz._checkoutInfo.shoppingCart.id, function (waiverSigningInfo) {
        thiz._initWith(waiverSigningInfo);
        thiz._reloading = false;
    }, "Loading...");
};

CheckoutAgreementStep.prototype._initWith = function (waiverSigningInfo, shoppingCart) {
    this._shoppingCart = shoppingCart;
    this._waiverSigningInfo = waiverSigningInfo;

    this._signedWaiverIndexMap = {};
    var thiz = this;

    if (waiverSigningInfo.signedWaivers) {
        waiverSigningInfo.signedWaivers.forEach(function (signedWaiver) {
            var key = signedWaiver.existingMemberId > 0? ("E" + signedWaiver.existingMemberId) : ("N" + signedWaiver.newMemberId);
            var memberSigning = thiz._signedWaiverIndexMap[key] ? thiz._signedWaiverIndexMap[key] : {};
            memberSigning[signedWaiver.agreementKey] = {memberSignedAgreementId: signedWaiver.memberSignedAgreementId, signedWaiverIndex: signedWaiver.waiverIndex};
            thiz._signedWaiverIndexMap[key] = memberSigning;
        });
    }
    thiz.classRepeaterView.setItems(waiverSigningInfo.requests);
    this.memberRepeaterView.setItems(this._getMemberInfos(waiverSigningInfo));
};

CheckoutAgreementStep.prototype._handleClick = function (event) {
    if (this._reloading) return;

    var checkbox = Dom.findParentWithClass(event.target, "AnonId_waiverSigninCheckbox");
    if (checkbox) {
        this._clearValidationError();
        var waiverItem = Dom.findParentWithClass(checkbox, "WaiverItem");
        if (!waiverItem) return;
        Dom.toggleClass(waiverItem, "Signed", checkbox.checked ? true : false);
        return;
    }

    var waiverDetailLink = Dom.findParentWithClass(event.target, "AnonId_waiverDetailLink");
    if (waiverDetailLink) {
        var waiverInfo = Dom.findUpwardForData(event.target, "_waiverInfo");
        if (waiverInfo) {
            widget.__ensureNamespaceLoaded("cmshopping", function (waiver) {
                new waiver.WaiverDetailDialog().open({
                    waiverInfo: waiverInfo
                });
            }, "Loading...");
        }
        return;
    }

    checkbox = Dom.findParentWithClass(event.target, "DisplayModeBox");
    if (checkbox) {
        this.invalidateDisplayMode();
        return;
    }
};

CheckoutAgreementStep.prototype._clearValidationError = function () {
    if (this._lastInfoTip) {
        this._lastInfoTip.close();
        if (this._lastInfoTip.popupContainer && document.body.contains(this._lastInfoTip.popupContainer)) {
            document.body.removeChild(this._lastInfoTip.popupContainer);
        }
    }
};
CheckoutAgreementStep.prototype._getMemberSignedWaivers = function () {
    var keys = [];
    var hasError = false;
    var result = [];

    this._clearValidationError();
    var thiz = this;

    Dom.doOnSelector(this.node(), (this.isUseClassMode() ? ".AnonId_classRepeaterView " : ".AnonId_memberRepeaterView ") +  ".WaiverItem input.AnonId_waiverSigninCheckbox", function (checkbox) {
        if (hasError) return;
        var waiverItem = Dom.findUpwardForData(checkbox, "_repeaterData");
        var request = Dom.findUpwardForData(waiverItem.parentNode, "_repeaterData");

        if (checkbox.checked) {
            var agreementKey  = checkbox.getAttribute("agreement-key");
            var moduleDataId  = checkbox.getAttribute("module-data-id");
            var moduleId  = checkbox.getAttribute("module--id");
            var agreementId = checkbox.getAttribute("agreement-id");
            var existingMemberId = checkbox.getAttribute("existing-member-id");
            var newMemberId = checkbox.getAttribute("new-member-id");
            var existingSignedId = checkbox.getAttribute("member-signed-agreement-id");
            var signedInfo = {
                waiverIndex: agreementId,
                agreementKey: agreementKey,
                existingMemberId: existingMemberId? existingMemberId : 0,
                newMemberId: newMemberId? newMemberId : 0,
                memberSignedAgreementId: existingSignedId? existingSignedId: 0
            };
            result.push(signedInfo);
        } else {
            if (waiverItem.required) {
                hasError = true;
                checkbox.focus();
                thiz._lastInfoTip = InfoTip.show(Dom.findParentWithClass(checkbox, "WaiverItem"), "Please read and sign this required agreement.", true, null, "error");
            }
        }
    });

    return hasError ? null : result;
};

CheckoutAgreementStep.prototype.commitStep = function (callback) {
    var result = this._getMemberSignedWaivers();
    console.log(result);
    if (!result) return;

    $shoppingCartService.setMemberSignedWaivers(result, callback, "Signing agreements...");
};

CheckoutAgreementStep.prototype.isUseClassMode = function () {
    return this.classModeInput.checked;
};
CheckoutAgreementStep.prototype.invalidateDisplayMode = function () {
    Dom.toggleClass(this.node(), "ClassMode", this.isUseClassMode());
    Dom.toggleClass(this.node(), "MemberMode", !this.isUseClassMode());
    //localStorage.setItem(this._getStorageKey(), this.isUseClassMode() ? "ClassMode" : "MemberMode");
};
CheckoutAgreementStep.STORAGE_KEY_DISPLAY_MODE = "_CheckoutAgreementStep.displayMode_";
CheckoutAgreementStep.prototype._getStorageKey = function () {
    return CheckoutAgreementStep.STORAGE_KEY_DISPLAY_MODE + TEAM_INFO.alias + "_";
}
CheckoutAgreementStep.prototype._getMemberInfos = function (waiverSigningInfo) {
    var memberInfoMap = {};
    var memberInfos = [];
    waiverSigningInfo.requests.forEach(function(request) {
        request.members.forEach(function(member) {
            var key = (member.new? "N" : "") + member.id;
            var memberInfo = memberInfoMap[key];
            if (!memberInfo) {
                memberInfo = {memberName : member.fullName,
                                memberKey: key,
                                existingMemberId: member.new? 0 : member.id,
                                newMemberId: member.new? member.id : 0};
                memberInfoMap[key] =  memberInfo;
                memberInfos.push(memberInfo);
            }

            if (!memberInfo.registrationTitles) {
                memberInfo.registrationTitles = [];
            }
            memberInfo.registrationTitles.push(request.title);

            var waiverIndexs = memberInfo.waiverIndexs;
            if (!memberInfo.waiverIndexs) {
                memberInfo.waiverIndexs = [];
                memberInfo.waiverItems = [];
            }
            request.waiverItems.forEach(function(waiver) {
                if (memberInfo.waiverIndexs.indexOf(waiver.index) < 0) {
                    memberInfo.waiverIndexs.push(waiver.index);
                    memberInfo.waiverItems.push(waiver);
                }
            });
        });
    });

    memberInfos.forEach(function(memberInfo) {
        memberInfo.waiverItems.sort(function(a, b) {
            return a.index - b.index;
        });
    });
    return memberInfos.sort(function(a, b) {
        return a.memberName.toLowerCase().localeCompare(b.memberName.toLowerCase(), window.LOCALE.language || "us-US");
    });
}


__pkg.__export(CheckoutAgreementStep);

})(widget.__getNamespaceHolder("shoppingcart"));


if (window) window.__currentScriptPath = "/v2/shoppingcart/widgets/steps/CheckoutStepCreateAccount.js";

(function (__pkg) {
function CheckoutStepCreateAccount(node) {
    BaseTemplatedWidget.call(this);
}
__extend(BaseTemplatedWidget, CheckoutStepCreateAccount);
CheckoutStepCreateAccount.prototype._renderBillingInfo = function (info) {
    info = info || {};
    var externalInfo = info.externalInfo || {};
    this.billingAddressInput.value = info.address || "";
    this.cityInput.value = info.city || "";
    this.stateInput.value = info.state || "";
    this.zipCodeInput.value = info.zip || "";
    this.phoneNumberInput.value = info.homePhone || "";
    this.workPhoneNumberInput.value = info.workPhone || "";
    this.billingFirstNameInput.value = info.firstName || externalInfo.firstName || "";
    this.billingLastNameInput.value = info.lastName || externalInfo.lastName || "";
    Dom.setInnerText(this.billingEmailLabel, info.email);
};

CheckoutStepCreateAccount.prototype.init = function (step, checkoutInfo, wizardAPI) {
    this.bind("change", this.offSmsCheckboxChangedHandler, this.offSmsCheckbox);
        
    this._step = step;
    this._checkoutInfo = checkoutInfo;
    this._wizardAPI = wizardAPI;
    this.account = checkoutInfo.shoppingCart.accountData.account;
    $shoppingCartService.getShoppingCartAccountSettingInfo(checkoutInfo.shoppingCart.id, function(settingInfo) {
        this.settingInfo = settingInfo || {};
        widget.__ensureNamespaceLoaded("util", function (ns) {
            this.phoneUtil = ns.phoneUtil;
            this._setup();
            this._initImpl();
            this.offSmsCheckboxChangedHandler();
        }.bind(this));        
    }.bind(this), "Loading...");
};
CheckoutStepCreateAccount.prototype._setup = function () {
    Dom.toggleClass(this.customAccountFieldNameLabel.parentNode, "Hidden", this.settingInfo.showCustomField ? false : true);
    Dom.toggleClass(this.customAccountFieldNameLabel.parentNode, "Required", this.settingInfo.customFieldRequired ? true : false);
    Dom.setInnerText(this.customAccountFieldNameLabel, this.settingInfo.customFieldLabel + ":");
    Dom.toggleClass(this.smsOnOffEntryGroup, "Active", this.settingInfo.smsRequired);
    
    if (this.settingInfo.smsRequired) {
        Dom.toggleClass(this.alternateSmsLabel, "RequiredFieldLabel", this.settingInfo.smsRequired);
        Dom.toggleClass(this.alternateCarrierLabel, "RequiredFieldLabel", this.settingInfo.smsRequired);
    }

    var parentsReq = this.settingInfo.parentsReq || 0;
    if (parentsReq == 1) {
        Dom.addClass(this.guardian1FirstNameInput.parentNode, "Required");
        Dom.addClass(this.guardian1LastNameInput.parentNode, "Required");
        Dom.addClass(this.guardian1HomePhoneInput.parentNode, "Required");
        Dom.addClass(this.guardian1WorkPhoneInput.parentNode, "Required");
        Dom.addClass(this.guardian1MobilePhoneInput.parentNode, "Required");

        Dom.addClass(this.guardian2FirstNameInput.parentNode, "Required");
        Dom.addClass(this.guardian2LastNameInput.parentNode, "Required");
        Dom.addClass(this.guardian2HomePhoneInput.parentNode, "Required");
        Dom.addClass(this.guardian2WorkPhoneInput.parentNode, "Required");
        Dom.addClass(this.guardian2MobilePhoneInput.parentNode, "Required");
    } else if (parentsReq == 2) {
        Dom.addClass(Dom.findParentWithClass(this.guardian1FirstNameInput, "EntrySection"), "Hidden");
    }

    var insurReq = this.settingInfo.insurReq || 0;
    if (insurReq == 1) {
        Dom.addClass(this.insuranceCarrierInput.parentNode, "Required");
        Dom.addClass(this.insurancePhoneInput.parentNode, "Required");
    } else if (insurReq == 2){
        Dom.addClass(Dom.findParentWithClass(this.insuranceCarrierInput, "EntrySection"), "Hidden");
    }

    var emrgReq = this.settingInfo.emrgReq || 0;
    if (emrgReq == 1) {
        Dom.addClass(this.emergencyContactInput.parentNode, "Required");
        Dom.addClass(this.emergencyPhoneInput.parentNode, "Required");
        Dom.addClass(this.emergencyContactInput2.parentNode, "Required");
        Dom.addClass(this.emergencyPhoneInput2.parentNode, "Required");
    } else if (emrgReq == 2) {
        Dom.addClass(Dom.findParentWithClass(this.emergencyPhoneInput, "EntrySection"), "Hidden");
        Dom.addClass(Dom.findParentWithClass(this.emergencyPhoneInput2, "EntrySection"), "Hidden");
    }

    if (__pkg.ModuleData.isSMSEnabled) {
        Dom.addClass(this.smsEntryGroup, "Active");
        
        var selectOptsComparer = function (a, b) {
            return a.id == b.id;
        };
        var selectOptsRenderer = function(data) {
            return data.name || "";
        };
        this.alternateCarrierInput.comparer = selectOptsComparer;
        this.alternateCarrierInput.renderer = selectOptsRenderer;
        this.alternateCarrierInput.setItems(__pkg.ModuleData.smsCarrierOptions);
        this.alternateCarrierInput.selectItemByKey("id", 0);
    }
}

CheckoutStepCreateAccount.prototype._initImpl = function () {
    var account = this.account;
    this._renderBillingInfo(this.account);
    var externalInfo = this.account.externalInfo || {};
    Dom.setInnerText(this.firstNameLabel, externalInfo.firstName || "");
    Dom.setInnerText(this.lastNameLabel, externalInfo.lastName || "");
    Dom.setInnerText(this.emailLabel, account.email);

    this.alternateEmail1Input.value = account.email1 || "";
    this.alternateEmail2Input.value = account.email2 || "";
    this.customFieldInput.value = account.teamSpecificAccountQuestionAnswer || "";
    this.guardian1FirstNameInput.value = account.guardian1FirstName || "";
    this.guardian1LastNameInput.value = account.guardian1LastName || "";
    this.guardian1HomePhoneInput.value = account.guardian1HomePhone || "";
    this.guardian1WorkPhoneInput.value = account.guardian1WorkPhone || "";
    this.guardian1MobilePhoneInput.value = account.guardian1MobilePhone || "";
    this.guardian2FirstNameInput.value = account.guardian2FirstName || "";
    this.guardian2LastNameInput.value = account.guardian2LastName || "";
    this.guardian2HomePhoneInput.value = account.guardian2HomePhone || "";
    this.guardian2WorkPhoneInput.value = account.guardian2WorkPhone || "";
    this.guardian2MobilePhoneInput.value = account.guardian2MobilePhone || "";
    this.insuranceCarrierInput.value = account.insuranceCarrierName || "";
    this.insurancePhoneInput.value = account.insurancePhone || "";
    this.emergencyContactInput.value = account.emergencyContactName || "";
    this.emergencyPhoneInput.value = account.emergencyContactPhone || "";
    this.emergencyContactInput2.value = account.emergencyContactName2 || "";
    this.emergencyPhoneInput2.value = account.emergencyContactPhone2 || "";
    if (__pkg.ModuleData.isSMSEnabled) {
        this.alternateSmsInput.value = account.sms || "";
        this.alternateCarrierInput.selectItemByKey("id", account.smsCarrier || 0);
        if (this.settingInfo.smsRequired) this.offSmsCheckbox.checked = account.skipSmsSelected;
    }
};

CheckoutStepCreateAccount.prototype.commitStep = function (callback) {
    this._configureValidation();
    if (!this.isAbleToCommit()) return;
    var newAccount = {
        email1: this.alternateEmail1Input.value.trim(),
        email2: this.alternateEmail2Input.value.trim(),
        teamSpecificAccountQuestionAnswer: this.customFieldInput.value.trim(),
        guardian1FirstName: this.guardian1FirstNameInput.value.trim(),
        guardian1LastName: this.guardian1LastNameInput.value.trim(),
        guardian1HomePhone: this.phoneUtil.getPhoneNumberFromInput(this.guardian1HomePhoneInput.value.trim()),
        guardian1WorkPhone: this.phoneUtil.getPhoneNumberFromInput(this.guardian1WorkPhoneInput.value.trim()),
        guardian1MobilePhone: this.phoneUtil.getPhoneNumberFromInput(this.guardian1MobilePhoneInput.value.trim()),
        guardian2FirstName: this.guardian2FirstNameInput.value.trim(),
        guardian2LastName: this.guardian2LastNameInput.value.trim(),
        guardian2HomePhone: this.phoneUtil.getPhoneNumberFromInput(this.guardian2HomePhoneInput.value.trim()),
        guardian2WorkPhone: this.phoneUtil.getPhoneNumberFromInput(this.guardian2WorkPhoneInput.value.trim()),
        guardian2MobilePhone: this.phoneUtil.getPhoneNumberFromInput(this.guardian2MobilePhoneInput.value.trim()),
        insuranceCarrierName: this.insuranceCarrierInput.value.trim(),
        insurancePhone: this.phoneUtil.getPhoneNumberFromInput(this.insurancePhoneInput.value.trim()),
        emergencyContactName: this.emergencyContactInput.value.trim(),
        emergencyContactPhone: this.phoneUtil.getPhoneNumberFromInput(this.emergencyPhoneInput.value.trim()),
        emergencyContactName2: this.emergencyContactInput2.value.trim(),
        emergencyContactPhone2: this.phoneUtil.getPhoneNumberFromInput(this.emergencyPhoneInput2.value.trim()),
        address: this.billingAddressInput.value.trim(),
        city: this.cityInput.value.trim(),
        state: this.stateInput.value.trim(),
        zip: this.zipCodeInput.value.trim(),
        homePhone: this.phoneUtil.getPhoneNumberFromInput(this.phoneNumberInput.value.trim()),
        workPhone: this.phoneUtil.getPhoneNumberFromInput(this.workPhoneNumberInput.value.trim()),
        firstName: this.billingFirstNameInput.value.trim(),
        lastName: this.billingLastNameInput.value.trim(),
        sms: !__pkg.ModuleData.isSMSEnabled ? undefined : this.phoneUtil.getPhoneNumberFromInput(this.alternateSmsInput.value.trim()),
        smsCarrier: !__pkg.ModuleData.isSMSEnabled ? undefined : this.alternateCarrierInput.getSelectedItem().id,
        skipSmsSelected: this.settingInfo.smsRequired && this.offSmsCheckbox.checked
    };

    $shoppingCartService.saveNewAccountData(newAccount, callback);
};
CheckoutStepCreateAccount.prototype.isAbleToCommit = function (silent) {
    return ValidationManager.run(this.validationRules);
};

CheckoutStepCreateAccount.prototype._configureValidation = function () {
    this.validationRules = new RuleSet()
                                    .live(true)
                                    .pattern(this.alternateEmail1Input, ValidationManager.patterns.EMAIL_REGEX, "Please enter a valid email address")
                                    .pattern(this.alternateEmail2Input, ValidationManager.patterns.EMAIL_REGEX, "Please enter a valid email address");

    this.validationRules.required(this.billingFirstNameInput, "Please enter the '" + this.billingInfoFirstNameLabel.innerHTML.replace(":", "").toLowerCase() + "'");
    this.validationRules.required(this.billingLastNameInput, "Please enter the '" + this.billingInfoLastNameLabel.innerHTML.replace(":", "").toLowerCase() + "'");
    this.validationRules.required(this.billingAddressInput, "Please enter the '" + this.billingInfoBillingAddressLabel.innerHTML.replace(":", "").toLowerCase() + "'");
    this.validationRules.required(this.cityInput, "Please enter the '" + this.billingInfoCityLabel.innerHTML.replace(":", "").toLowerCase() + "'");
    this.validationRules.required(this.stateInput, "Please enter the '" + this.billingInfoStateLabel.innerHTML.replace(":", "").toLowerCase() + "'");
    this.validationRules.required(this.zipCodeInput, "Please enter the '" + this.billingInfoZipLabel.innerHTML.replace(":", "").toLowerCase() + "'");

    if (this.settingInfo.customFieldRequired) {
        this.validationRules.required(this.customFieldInput, "Please enter the '" + this.customAccountFieldNameLabel.innerHTML + "'");
    }

    if (this.settingInfo.smsRequired && !this.offSmsCheckbox.checked) {
        this.phoneUtil.getSMSValidationRules("Mobile\/SMS", this.alternateSmsInput, this.alternateCarrierInput, undefined, undefined, __pkg.ModuleData.accountSMSRequired).forEach((rule, i) => {
            this.validationRules.custom(rule);
        });
    
        this.phoneUtil.installEventsForValidateSMS(this.alternateSmsInput, this.alternateCarrierInput, this.smsUnverifiedBtn, this.smsValid);
        this.phoneUtil.invalidateSMSAndCarrier(this.alternateSmsInput, this.alternateCarrierInput);
    }

    this.validationRules.required(this.phoneNumberInput, "Please enter the '" + this.billingInfoPhoneLabel.innerHTML.replace(":", "").toLowerCase() + "'");

    if (this.settingInfo.parentsReq == 1) {
        this.validationRules.required(this.guardian1FirstNameInput, "Please enter the 'Guardian 1 First Name'");
        this.validationRules.required(this.guardian1LastNameInput, "Please enter the 'Guardian 1 Last Name'");
        this.validationRules.required(this.guardian1HomePhoneInput, "Please enter the 'Guardian 1 Home Phone'");
        this.validationRules.required(this.guardian1WorkPhoneInput, "Please enter the 'Guardian 1 Work Phone'");
        this.validationRules.required(this.guardian1MobilePhoneInput, "Please enter the 'Guardian 1 Mobile Phone'");

        this.validationRules.required(this.guardian2FirstNameInput, "Please enter the 'Guardian 2 First Name'");
        this.validationRules.required(this.guardian2LastNameInput, "Please enter the 'Guardian 2 Last Name'");
        this.validationRules.required(this.guardian2HomePhoneInput, "Please enter the 'Guardian 2 Home Phone'");
        this.validationRules.required(this.guardian2WorkPhoneInput, "Please enter the 'Guardian 2 Work Phone'");
        this.validationRules.required(this.guardian2MobilePhoneInput, "Please enter the 'Guardian 2 Mobile Phone'");
    }

    if (this.settingInfo.insurReq == 1) {
        this.validationRules.required(this.insuranceCarrierInput, "Please enter the 'Insurance Carrier'");
        this.validationRules.required(this.insurancePhoneInput, "Please enter the 'Insurance Phone'");
    }

    if (this.settingInfo.emrgReq == 1) {
        this.validationRules.required(this.emergencyContactInput, "Please enter the 'Emergency Contact'");
        this.validationRules.required(this.emergencyPhoneInput, "Please enter the 'Emergency Phone'");
        this.validationRules.required(this.emergencyContactInput2, "Please enter the 'Secondary Emergency Contact'");
        this.validationRules.required(this.emergencyPhoneInput2, "Please enter the 'Secondary Emergency Phone'");
    }

    var rules = [];
    rules = rules.concat(this.phoneUtil.getRequiredSMSValidationRules("Home Phone", this.phoneNumberInput));
    rules = rules.concat(this.phoneUtil.getSMSValidationRules("Work/Mobile Phone", this.workPhoneNumberInput));

    if (this.settingInfo.parentsReq == 1) {
        rules = rules.concat(this.phoneUtil.getRequiredSMSValidationRules("Home Phone", this.guardian1HomePhoneInput));
        rules = rules.concat(this.phoneUtil.getRequiredSMSValidationRules("Work Phone", this.guardian1WorkPhoneInput));
        rules = rules.concat(this.phoneUtil.getRequiredSMSValidationRules("Mobile Phone", this.guardian1MobilePhoneInput));

        rules = rules.concat(this.phoneUtil.getRequiredSMSValidationRules("Home Phone", this.guardian2HomePhoneInput));
        rules = rules.concat(this.phoneUtil.getRequiredSMSValidationRules("Work Phone", this.guardian2WorkPhoneInput));
        rules = rules.concat(this.phoneUtil.getRequiredSMSValidationRules("Mobile Phone", this.guardian2MobilePhoneInput));

    } else {
        rules = rules.concat(this.phoneUtil.getSMSValidationRules("Home Phone", this.guardian1HomePhoneInput));
        rules = rules.concat(this.phoneUtil.getSMSValidationRules("Work Phone", this.guardian1WorkPhoneInput));
        rules = rules.concat(this.phoneUtil.getSMSValidationRules("Mobile Phone", this.guardian1MobilePhoneInput));

        rules = rules.concat(this.phoneUtil.getSMSValidationRules("Home Phone", this.guardian2HomePhoneInput));
        rules = rules.concat(this.phoneUtil.getSMSValidationRules("Work Phone", this.guardian2WorkPhoneInput));
        rules = rules.concat(this.phoneUtil.getSMSValidationRules("Mobile Phone", this.guardian2MobilePhoneInput));
    }
    if (this.settingInfo.insurReq == 1) {
        rules = rules.concat(this.phoneUtil.getRequiredSMSValidationRules("Insurance Phone", this.insurancePhoneInput));
    } else {
        rules = rules.concat(this.phoneUtil.getSMSValidationRules("Insurance Phone", this.insurancePhoneInput));
    }
    if (this.settingInfo.emrgReq == 1) {
        rules = rules.concat(this.phoneUtil.getRequiredSMSValidationRules("Emergency Phone", this.emergencyPhoneInput));
        rules = rules.concat(this.phoneUtil.getRequiredSMSValidationRules("Secondary Emergency Phone", this.emergencyPhoneInput2));
    } else {
        rules = rules.concat(this.phoneUtil.getSMSValidationRules("Emergency Phone", this.emergencyPhoneInput));
        rules = rules.concat(this.phoneUtil.getSMSValidationRules("Secondary Emergency Phone", this.emergencyPhoneInput2));
    }

    rules.forEach(function(rule) {
        this.validationRules.custom(rule);
    }.bind(this));
};

CheckoutStepCreateAccount.prototype.offSmsCheckboxChangedHandler = function () {
    if (this.offSmsCheckbox.checked) {
        this.alternateSmsInput.value = "";
        this.alternateSmsInput.setAttribute("disabled", "disabled");
        this.alternateCarrierInput.selectItemByKey("id", 0);
        this.alternateCarrierInput.setEnable(false);
        Dom.removeClass(this.alternateSmsInput, "CV_Invalid");        
    } else {
        this.alternateSmsInput.removeAttribute("disabled");
        this.alternateCarrierInput.setEnable(true);
    }
};


__pkg.__export(CheckoutStepCreateAccount);

})(widget.__getNamespaceHolder("shoppingcart"));


if (window) window.__currentScriptPath = "/v2/shoppingcart/widgets/steps/CheckoutStepConfirmAccount.js";

(function (__pkg) {
function CheckoutStepConfirmAccount(node) {
    BaseTemplatedWidget.call(this);
}
__extend(__pkg.CheckoutStepCreateAccount, CheckoutStepConfirmAccount);

CheckoutStepConfirmAccount.prototype.commitStep = function (callback) {
    this._configureValidation();
    if (!this.isAbleToCommit()) return;
    var account = {
        id: this.account.id,
        first_name: this.billingFirstNameInput.value.trim(),
        last_name: this.billingLastNameInput.value.trim(),
        email: this.account.email
    };

    account.email_opt1 = this.alternateEmail1Input.value.trim();
    account.email_opt2 = this.alternateEmail2Input.value.trim();
    account.cust_fld = this.customFieldInput.value.trim();
    account.guard1_firstname = this.guardian1FirstNameInput.value.trim();
    account.guard1_lastname = this.guardian1LastNameInput.value.trim();
    account.guard1_phone_h = this.phoneUtil.getPhoneNumberFromInput(this.guardian1HomePhoneInput.value.trim());
    account.guard1_phone_w = this.phoneUtil.getPhoneNumberFromInput(this.guardian1WorkPhoneInput.value.trim());
    account.guard1_phone_m = this.phoneUtil.getPhoneNumberFromInput(this.guardian1MobilePhoneInput.value.trim());

    account.guard2_firstname = this.guardian2FirstNameInput.value.trim();
    account.guard2_lastname = this.guardian2LastNameInput.value.trim();
    account.guard2_phone_h = this.phoneUtil.getPhoneNumberFromInput(this.guardian2HomePhoneInput.value.trim());
    account.guard2_phone_w = this.phoneUtil.getPhoneNumberFromInput(this.guardian2WorkPhoneInput.value.trim());
    account.guard2_phone_m = this.phoneUtil.getPhoneNumberFromInput(this.guardian2MobilePhoneInput.value.trim());

    account.med_carrier = this.insuranceCarrierInput.value.trim();
    account.med_carrier_phone = this.phoneUtil.getPhoneNumberFromInput(this.insurancePhoneInput.value.trim());
    account.emergency_contact = this.emergencyContactInput.value.trim();
    account.emergency_phone = this.phoneUtil.getPhoneNumberFromInput(this.emergencyPhoneInput.value.trim());

    account.address = this.billingAddressInput.value.trim();
    account.city = this.cityInput.value.trim();
    account.state = this.stateInput.value.trim();
    account.zip = this.zipCodeInput.value.trim();
    account.phone_h = this.phoneUtil.getPhoneNumberFromInput(this.phoneNumberInput.value.trim());
    account.phone_w = this.phoneUtil.getPhoneNumberFromInput(this.workPhoneNumberInput.value.trim());
    account.emergency_contact2 = this.emergencyContactInput2.value.trim();
    account.emergency_phone2 = this.phoneUtil.getPhoneNumberFromInput(this.emergencyPhoneInput2.value.trim());
    account.sms1 = !__pkg.ModuleData.isSMSEnabled ? undefined : this.phoneUtil.getPhoneNumberFromInput(this.alternateSmsInput.value.trim());
    account.sms1_carrier = !__pkg.ModuleData.isSMSEnabled ? undefined : this.alternateCarrierInput.getSelectedItem().id;
    account.skipSmsSelected = this.settingInfo.smsRequired && this.offSmsCheckbox.checked;

    $shoppingCartService.saveAccountData(account, callback);
};

CheckoutStepConfirmAccount.prototype._initImpl = function () {
    var account = this.account;
    console.log(this._checkoutInfo);
    this._renderBillingInfo(this.account);
    Dom.setInnerText(this.firstNameLabel, account.first_name);
    Dom.setInnerText(this.lastNameLabel, account.last_name);
    Dom.setInnerText(this.emailLabel, account.email);

    this.alternateEmail1Input.value = account.email_opt1 || "";
    this.alternateEmail2Input.value = account.email_opt2 || "";
    this.customFieldInput.value = account.cust_fld || "";
    this.alternateSmsInput.value = account.sms1 || "";
    if (account.sms1.length > 0) {
        this.alternateCarrierInput.setEnable(true);
    }
    if (account.sms1_carrier) this.alternateCarrierInput.selectItemByKey("id", account.sms1_carrier);
    this.guardian1FirstNameInput.value = account.guard1_firstname || "";
    this.guardian1LastNameInput.value = account.guard1_lastname || "";
    this.guardian1HomePhoneInput.value = account.guard1_phone_h || "";
    this.guardian1WorkPhoneInput.value = account.guard1_phone_w || "";
    this.guardian1MobilePhoneInput.value = account.guard1_phone_m || "";

    this.guardian2FirstNameInput.value = account.guard2_firstname || "";
    this.guardian2LastNameInput.value = account.guard2_lastname || "";
    this.guardian2HomePhoneInput.value = account.guard2_phone_h || "";
    this.guardian2WorkPhoneInput.value = account.guard2_phone_w || "";
    this.guardian2MobilePhoneInput.value = account.guard2_phone_m || "";

    this.insuranceCarrierInput.value = account.med_carrier || "";
    this.insurancePhoneInput.value = account.med_carrier_phone || "";
    this.emergencyContactInput.value = account.emergency_contact || "";
    this.emergencyPhoneInput.value = account.emergency_phone || "";
    this.emergencyContactInput2.value = account.emergency_contact2 || "";
    this.emergencyPhoneInput2.value = account.emergency_phone2 || "";
    if (this.settingInfo.smsRequired) this.offSmsCheckbox.checked = account.skipSmsSelected;

};

CheckoutStepConfirmAccount.prototype._renderBillingInfo = function (info) {
    console.log(info)
    info = info || {};
    this.billingAddressInput.value = info.address || "";
    this.cityInput.value = info.city || "";
    this.stateInput.value = info.state || "";
    this.zipCodeInput.value = info.zip || "";
    this.phoneNumberInput.value = info.phone_h || "";
    this.workPhoneNumberInput.value = info.phone_w || "";
    this.billingFirstNameInput.value = info.first_name || "";
    this.billingLastNameInput.value = info.last_name || "";
    Dom.setInnerText(this.billingEmailLabel, info.email);
};

CheckoutStepConfirmAccount.prototype.getTemplatePath = function () {
    return __pkg.CheckoutStepCreateAccount.prototype.getTemplatePath();
};


__pkg.__export(CheckoutStepConfirmAccount);

})(widget.__getNamespaceHolder("shoppingcart"));


if (window) window.__currentScriptPath = "/v2/shoppingcart/widgets/steps/CheckoutStepConfirmCart.js";

(function (__pkg) {
function CheckoutStepConfirmCart(node) {
    BaseTemplatedWidget.call(this);

    var lastGroupKey = null;
    
    var thiz = this;
    var itemPopulator = function (data, binding, node) {
        var handler = thiz._moduleClientHandler[data.moduleId];
        Dom.setInnerText(binding.groupKeyDisplay.querySelector(".Primary"), data.groupKey != lastGroupKey ? data.groupKey : "");
        if (data.groupKey == lastGroupKey) {
            binding.groupKeyDisplay.querySelector(".Primary").style.display = "none";
        }
        binding.groupKeyDisplay.querySelector(".Secondary").appendChild(handler.renderCartItemDisplay(data, "item-detail-summary", thiz._checkoutInfo.shoppingCart));
        lastGroupKey = data.groupKey;
        binding.itemDisplay.innerHTML = "";
        binding.itemDisplay.appendChild(handler.renderCartItemDisplay(data, "simple-cart-listing"));
        Dom.setInnerText(binding.priceLabel, Util.toCurrency(data.price));
        
        var priceNote = handler.renderCartItemDisplay(data, "item-price-note", thiz._checkoutInfo.shoppingCart);
        if (priceNote) Dom.setInnerText(binding.moduleProvidedPriceNotes, priceNote);
        
        Dom.setInnerText(binding.quantityLabel, data.quantity);
    };
    
    this.moduleRepeater.populator = function (data, binding, node) {
        var handler = thiz._moduleClientHandler[data.id];
        if (handler.renderPurchaseConfirmation) {
            var renderResult = handler.renderPurchaseConfirmation(data, node, thiz._checkoutInfo.shoppingCart);
            if (renderResult.getAttribute && renderResult.nodeType) {
                node.appendChild(renderResult);
            } else if (typeof(renderResult) == "object") {
                var content = renderResult.splice ? Dom.newDOMFragment(renderResult) : Dom.newDOMElement(renderResult);
                node.appendChild(content);
            } else if (typeof(renderResult.into) == "function") {
                renderResult.into(node);
            } else {
                throw "Unspported render result";
            }
            
            return;
        }
        
        Dom.setInnerText(binding.moduleName, __pkg.ModuleData.moduleMap[data.id].name);
        lastGroupKey = null;
        binding.itemRepeater.populator = itemPopulator;
        binding.itemRepeater.setItems(data.items);
    };
    this.moduleRepeater.getTemplateRoleForData = function (data, index) {
        var handler = thiz._moduleClientHandler[data.id];
        return handler.renderPurchaseConfirmation ? "module-rendered-template" : "default-template";
    };

    this.bind("click", function (event) {
        var item = Dom.findUpwardForData(event.target, "_repeaterData");
        var chargeDetailIcon = Dom.findParentWithClass(event.target, "ChargeDetailIcon");
        if (item && chargeDetailIcon) {
            this.showChargeDetails(item);
        }
    }, this.moduleRepeater.node());
}
__extend(BaseTemplatedWidget, CheckoutStepConfirmCart);

CheckoutStepConfirmCart.prototype.init = function (step, checkoutInfo, wizardAPI) {
    this._step = step;
    this._checkoutInfo = checkoutInfo;
    this._wizardAPI = wizardAPI;
    this._moduleClientHandler = {};
    
    var thiz = this;

    var modules = this._groupItems(checkoutInfo.shoppingCart.items);
    AsyncAction.asyncDo(modules, function (module, next) {
        __pkg.getModuleClientHandler(module.id, function (handler) {
            thiz._moduleClientHandler[module.id] = handler;
            next();
        });
    }, function () {
        thiz.moduleRepeater.setItems(modules);
    });

    var accountData = checkoutInfo.shoppingCart.accountData;
    Dom.setInnerText(this.accountFullName, accountData.firstName + " " + accountData.lastName);
    Dom.setInnerText(this.accountEmail, accountData.finalAccount ? (accountData.finalAccount.email || "") : (accountData.account.email || ""));
    Dom.setInnerText(this.accountPhone, accountData.finalAccount ? (accountData.finalAccount.phone_h || "") : (accountData.account.homePhone || ""));

};
CheckoutStepConfirmCart.prototype.commitStep = function (callback) {
    callback();
};

CheckoutStepConfirmCart.prototype.showChargeDetails = function (item) {
    __pkg.showChargeDetails([item.id], this._checkoutInfo.shoppingCart);
}

CheckoutStepConfirmCart.prototype._groupItems = function (items) {
    var modules = [];
    var moduleMap = {};

    items.forEach(function (item) {
        var module = moduleMap[item.moduleId];
        if (!module) {
            module = {
                groups: [],
                groupMap: {},
                id: item.moduleId
            };
            moduleMap[item.moduleId] = module;
            modules.push(module);
        }

        var group = module.groupMap[item.groupKey];
        if (!group) {
            group = {
                items: [],
                key: item.groupKey
            };
            module.groupMap[item.groupKey] = group;
            module.groups.push(group);
        }

        group.items.push(item);
    });

    modules.forEach(function (module) {
        module.items = [];
        module.groups.forEach(function (group) {
            module.items = module.items.concat(group.items);
        });
    });

    return modules;
};


__pkg.__export(CheckoutStepConfirmCart);

})(widget.__getNamespaceHolder("shoppingcart"));


if (window) window.__currentScriptPath = "/v2/shoppingcart/widgets/steps/CheckoutStepPayment.js";

(function (__pkg) {
function CheckoutStepPayment(node) {
    BaseTemplatedWidget.call(this);
    var thiz = this;
    this._featureLoadingStatusMap = {};
}
__extend(BaseTemplatedWidget, CheckoutStepPayment);

CheckoutStepPayment.prototype.init = function (step, checkoutInfo, wizardAPI) {
    this._step = step;
    this._checkoutInfo = checkoutInfo;
    this._wizardAPI = wizardAPI;

    // Reload required resources
    widget.__ensureNamespaceLoaded("finance", function() {});
    widget.__ensureNamespaceLoaded("util", function (ns) {
        this.phoneUtil = ns.phoneUtil;
    }.bind(this));

    this._configureChipList(this.couponChipList);
    this._init();
};
CheckoutStepPayment.prototype.commitStep = function (callback) {
    if (!this.isAbleToCommit()) return;

    function doSubmit() {
        this._processPayment(callback);
    };
    widget.__ensureNamespaceLoaded("finance", doSubmit.bind(this));
};
CheckoutStepPayment.prototype.isAbleToCommit = function (silent) {
    return !Object.keys(this._featureLoadingStatusMap).length && this.validateBillingInfo(silent);
};

CheckoutStepPayment.prototype._init = function () {
    if (this._initialized) return;
    this._initialized = true;

    this.itemRepeater.populator = function (data, binding, node) {
        __pkg.getModuleClientHandler(data.moduleId, function (handler) {
            binding.itemDisplay.innerHTML = handler.renderCartItemDisplay(data, "purchase-summary-listing").innerHTML;
            thiz._setPrice(binding.itemPrice, data.price);
            Dom.toggleClass(node, "FirstGroupItem", data.firstItemOfModule);
        });
    };

    Dom.toggleClass(this.purchaseSummarySection, "CouponSupported", this._checkoutInfo.couponSupported ? true : false);

    this.bind("keydown", this.onCouponKeydown, this.couponChipList);
    this.bind("p:ValueChanged", function () {
        thiz.submitCouponCodes();
    }, this.couponChipList);
    this.bind("change", this.onCouponChange, this.couponChipList);

    this.bind("click", function(e) {
        this._toggleCouponCodeSection(true);
    }, this.couponCodeSectionToggler);
    this.bind("click", this._handleUnappliedPaymentConsumptionClick, this.unappliedPaymentConsumption);
    this.bind("click", this._handleAccountBalancePayoffClick, this.accountBalancePayoffCheckbox);

    this.bind("p:ComponentLoadingStatusesChanged", this._handleCompomentLoadingStatusesChanged, this.node());

    this.bind("click", this._handleAutoPayCardButtonClick, this.addAutoPayCardButton);

    var that = this;
    widget.createWidgetAsync("finance", "PaymentMethodWidget", {}, function(wg) {
        that.paymentMethodWidget = wg;
        wg.into(that.paymentMethodWidgetWrapper);

        that.paymentMethodWidget.onPaymentMethodChanged = that._onPaymentMethodChanged.bind(that);
        that._load();
    });
    
    InfoTip.install(this.unappliedPaymentConsumptionAlert, {
        match: function (node) {
            return Dom.hasClass(node, "AnonId_unappliedPaymentConsumptionAlert");
        },
        getMessage: function (target) {
            return target._popupMessage;
        }
    });
};

CheckoutStepPayment.prototype._bindInputHandlers = function () {
    if (this._inputHandlersBinded) return;
    this._inputHandlersBinded = true;

    this.bind("input", function(e) {
        this._clearValidationErrorOnNode(Dom.getTarget(e));
    }, this.billingInfoSection);
};

CheckoutStepPayment.prototype._refreshAllPaymentMethodList = function () {
    var listNodes = this.paymentMethodWidget.node().querySelectorAll('.AnonId_accountCardList');
    if (!listNodes) return;

    listNodes.forEach(function(element) {
        var selectedView = element.querySelector('.AccountCardView');
        if (selectedView) {
            Dom.emitEvent("p:AccountCardDeleted", selectedView);
        }
    });
};

CheckoutStepPayment.prototype._setLoadingStatus = function (featureName, status) {
    if (status) {
        this._featureLoadingStatusMap[featureName] = status;
    } else {
        delete this._featureLoadingStatusMap[featureName];
    }
    Dom.emitEvent("p:ComponentLoadingStatusesChanged", this.node(), this._featureLoadingStatusMap);
};

CheckoutStepPayment.prototype._load = function () {
    thiz = this;

    this._setLoadingStatus("PaymentMethod", "loading");
    this._setLoadingStatus("BillingInfo", "loading");
    this._setLoadingStatus("PurchaseSummary", "loading");

    $shoppingCartService.getCheckoutPaymentPrerequisite(function (cpResult) {
        __pkg.ensureCartModulesLoaded(cpResult.shoppingCart, function () {
            thiz._renderBillingInfo(cpResult.billingInfo || cpResult.accountBillingInfo, cpResult.shoppingCart);
            thiz._renderPaymentMethods(cpResult);
            thiz._bindInputHandlers();
        });
    }, function(error) {
        Dialog.error((error && error.message) || error || "Unknown exception");
    }, "Loading...");
};

CheckoutStepPayment.prototype._requestCheckoutPayment = function () {
    Dom.addClass(this.purchaseSummarySection, "Loading");
    this._setLoadingStatus("PurchaseSummary", "loading");

    var cpRequest = {
        paymentProcessParams: this._buildProcessParams(),
        unappliedAmountConsumption: this._isUnappliedPaymentConsumptionSelected(),
        accountBalancePayoffSelected: this._isAccountBalancePayoffSelected()
    };
    $shoppingCartService.requestCheckoutPayment(cpRequest, function (cpResult) {
        thiz.checkoutPaymentResult = cpResult;

        __pkg.ensureCartModulesLoaded(cpResult.shoppingCart, function () {
            thiz._renderAutoPayMethodRequirement(cpResult);
            thiz._checkVisibilityOfAutoPayMethodRequirement();
            thiz._renderPurchaseSummary(cpResult);
        });
    }, function(error) {
        Dialog.error((error && error.message) || error || "Unknown exception");
        this._setLoadingStatus("PurchaseSummary", false);
    }.bind(this));
};

CheckoutStepPayment.prototype._renderPaymentMethods = function (cpResult) {
    if (!cpResult.acceptedPaymentRemittances || !cpResult.acceptedPaymentRemittances.length) {
        Dom.addClass(this.paymentMethodSection, "Hidden");
        this._onPaymentMethodsLoaded();
        return;
    }

    Dom.addClass(this.paymentMethodSection, "Loading");
    this.paymentMethodWidget.addLoadedListener(this._onPaymentMethodsLoaded.bind(this));
    this.paymentMethodWidget.addListChangedListener(this._onPaymentMethodsListChanged.bind(this));

	var acceptableMethods = [];
    var checkMethodName = this.paymentMethodWidget.getPaymentMethodByName("Check").name;
    var cashMethodName = this.paymentMethodWidget.getPaymentMethodByName("Cash").name;
    var checkMethodIndex = null;
    var cashMethodIndex = null;
    var checkRemittanceAddress = null;
    var cashRemittanceAddress = null;

    for (var i = 0, n = cpResult.acceptedPaymentRemittances && cpResult.acceptedPaymentRemittances.length; i < n; i++) {
        var remittance = cpResult.acceptedPaymentRemittances[i];

        if (checkMethodName == this.paymentMethodWidget.getPaymentMethodByName(remittance.paymentMethod).name) {
            checkRemittanceAddress = remittance.remittanceAddress;
            checkMethodIndex = i;
        } else if (cashMethodName == this.paymentMethodWidget.getPaymentMethodByName(remittance.paymentMethod).name) {
            cashRemittanceAddress = remittance.remittanceAddress;
            cashMethodIndex = i;
        } else {
            acceptableMethods.push(remittance.paymentMethod);
        }
    }

    for (var i = 0; i < acceptableMethods.length; i++) {
        var pm = acceptableMethods[i];
        if (pm == this.paymentMethodWidget.getPaymentMethodByName("CreditCard").name) {
            this.paymentMethodWidget.setCustomHandler(pm, new __pkg.CreditCardHandler());
        } else if (pm == this.paymentMethodWidget.getPaymentMethodByName("ECheck").name) {
            this.paymentMethodWidget.setCustomHandler(pm, new __pkg.ECheckHandler());
        }
    }

    var billingInfo = cpResult.billingInfo || cpResult.accountBillingInfo || {};
    this.paymentMethodWidget.load({
                                    acceptableMethods: acceptableMethods,
                                    accountId: cpResult.shoppingCart.accountId,
                                    billingInfo: billingInfo || {}
    });

    if (checkRemittanceAddress) {
        this.checkRemittanceName.innerHTML = checkRemittanceAddress.fullName;
        this.checkRemittanceAddress.innerHTML = checkRemittanceAddress.address + ", " + checkRemittanceAddress.city + ", " + checkRemittanceAddress.state + " " + checkRemittanceAddress.zipCode;
        this.checkRemittancePhoneNumber.innerHTML = checkRemittanceAddress.phoneNumber;

        Dom.removeClass(this.checkPaymentRemittance, "Hidden");
        this.checkPaymentRemittance.setAttribute("tab-order", checkMethodIndex && (checkMethodIndex + 1));

        this.paymentMethodWidget.addPaymentMethod(checkMethodName, {
            icon: "cash-usd",
            title: checkMethodName,
            description: ""
        }, this.checkPaymentRemittance, new __pkg.DefaultPaymentMethodHandler());
    }
    if(cashRemittanceAddress) {
        this.cashRemittanceName.innerHTML = cashRemittanceAddress.fullName;
        this.cashRemittanceAddress.innerHTML = cashRemittanceAddress.address + ", " + cashRemittanceAddress.city + ", " + cashRemittanceAddress.state + " " + cashRemittanceAddress.zipCode;
        this.cashRemittancePhoneNumber.innerHTML = cashRemittanceAddress.phoneNumber;

        Dom.removeClass(this.cashPaymentRemittance, "Hidden");
        this.cashPaymentRemittance.setAttribute("tab-order", cashMethodIndex);

        this.paymentMethodWidget.addPaymentMethod(cashMethodName, {
            icon: "cash",
            title: cashMethodName,
            description: ""
        }, this.cashPaymentRemittance, new __pkg.DefaultPaymentMethodHandler());
    }
};

CheckoutStepPayment.prototype._onPaymentMethodsLoaded = function () {
    Dom.removeClass(this.paymentMethodSection, "Loading");
    this._setLoadingStatus("PaymentMethod", false);
};

CheckoutStepPayment.prototype._renderBillingInfo = function (info, shoppingCart) {
    info = info || {};
    this.firstNameInput.value = info.firstName || "";
    this.lastNameInput.value = info.lastName || "";
    this.billingAddressInput.value = info.address || "";
    this.cityInput.value = info.city || "";
    this.stateInput.value = info.state || "";
    this.zipCodeInput.value = info.zipCode || "";
    this.phoneNumberInput.value = info.phoneNumber || "";
    this.emailAddressInput.value = info.email || "";

    var isNewAccount = shoppingCart.accountData.new;
    Dom.toggleClass(this.billingInfoSection, "Hidden", isNewAccount);
    this._setLoadingStatus("BillingInfo", false);
};

CheckoutStepPayment.prototype.getBillingInfo = function () {
    var info = {};
    info.address = this.billingAddressInput.value.trim();
    info.firstName = this.firstNameInput.value.trim(),
    info.lastName = this.lastNameInput.value.trim(),
    info.city = this.cityInput.value.trim();
    info.state = this.stateInput.value.trim();
    info.zipCode = this.zipCodeInput.value.trim();
    info.phoneNumber = this.phoneUtil.getPhoneNumberFromInput(this.phoneNumberInput.value.trim());
    return info;
};

CheckoutStepPayment.prototype.validateBillingInfo = function (silent) {
    this._clearValidationError();

    var isNewAccount = this.checkoutPaymentResult.shoppingCart.accountData.new;
    if (isNewAccount) return true;

    var inputNodes = [this.firstNameInput, this.lastNameInput, this.billingAddressInput, this.cityInput, this.stateInput, this.zipCodeInput, this.phoneNumberInput];
    var invalidNode = null;
    for (var i in inputNodes) {
        var node = inputNodes[i];
        if (!node.value.trim().length) {
            invalidNode = node;
            break;
        }
    }

    if (invalidNode) {
        if (!silent) {
            Dom.addClass(invalidNode, "Required");
            invalidNode.focus();
            this._lastInfoTip = InfoTip.show(invalidNode, "This field is required.", true, null, "error");
        }
        return false;
    }
    if (!silent) {
        var validationRules = new RuleSet().live(true);
        var smsValidateRules = this.phoneUtil.getRequiredSMSValidationRules("Phone Number", this.phoneNumberInput);
        smsValidateRules.forEach(function (rule) {
            validationRules.custom(rule);
        });
        if (!ValidationManager.run(validationRules)) return false;
    }
    return true;
};

CheckoutStepPayment.prototype._clearValidationError = function () {
    this.node().querySelectorAll("input.Required").forEach(function(node) {
        Dom.removeClass(node, "Required");
    });

    if (this._lastInfoTip) {
        this._lastInfoTip.close();
        if (this._lastInfoTip.popupContainer && document.body.contains(this._lastInfoTip.popupContainer)) {
            document.body.removeChild(this._lastInfoTip.popupContainer);
        }
    }
};
CheckoutStepPayment.prototype._clearValidationErrorOnNode = function (node) {
    Dom.removeClass(node, "Required");

    var infoTip = node.__tip;
    if (infoTip) {
        infoTip.close();
        if (infoTip.popupContainer && document.body.contains(infoTip.popupContainer)) {
            document.body.removeChild(infoTip.popupContainer);
        }
    }
};

CheckoutStepPayment.prototype._setPrice = function (node, price) {
    if (price == -0) price = 0;
    Dom.setInnerText(node, Util.toCurrency(price));

    Dom.removeClass(node, "Negative");
    Dom.removeClass(node, "Zero");
    if (price < 0) {
        Dom.addClass(node, "Negative");
    } else if (price == 0) {
        Dom.addClass(node, "Zero");
    }
};

CheckoutStepPayment.prototype._renderPurchaseSummary = function (cpResult) {
    var displayItems = this._buildPurchaseDisplayItems(cpResult.shoppingCart.moduleSummaries);
    this.itemRepeater.setItems(displayItems);

    if (!cpResult.shoppingCart.taxSummary || cpResult.shoppingCart.taxSummary.amount) {
        Dom.setInnerText(this.taxRateDisplay, cpResult.shoppingCart.taxSummary.rateDisplay);
        this._setPrice(this.taxAmount, cpResult.shoppingCart.taxSummary.amount);
        Dom.removeClass(this.taxSection, "Hidden");
    } else {
        Dom.addClass(this.taxSection, "Hidden");
    }

    var couponList = [];
    if (!this._couponCodeUsabilityMap) this._couponCodeUsabilityMap = {};
    if (cpResult.shoppingCart.couponCodes && cpResult.shoppingCart.couponCodes.length) {
        cpResult.shoppingCart.couponCodes.forEach(function(couponCode) {
            this._couponCodeUsabilityMap[couponCode] = true;
        }.bind(this));
    }
    var invalidCouponCodes = [];
    for (var code in this._couponCodeUsabilityMap) {
        var valid = this._couponCodeUsabilityMap[code];
        couponList.push({name: code, valid: valid});
        if (!valid) invalidCouponCodes.push(code);
    }
    this.couponChipList.setItems(couponList);
    this._toggleCouponCodeSection(couponList.length);
    Dom.toggleClass(this.invalidCouponCodeSection, "Hidden", !invalidCouponCodes.length);
    if (invalidCouponCodes.length) {
        this.invalidCouponCodeDisplay.innerHTML = "'" + invalidCouponCodes.join("', '") + "'";
    }

    this._setPrice(this.couponTotalAmount, cpResult.shoppingCart.totalCouponDiscountAmount);
    this._setPrice(this.subTotalAmount, cpResult.subTotal);
    this._setPrice(this.totalAmount, cpResult.total);

    this._renderProcessingFee(cpResult);
    this._renderUnappliedPaymentConsumption(cpResult);
    this._renderAccountBalancePayoff(cpResult);
    this._renderSubTotalSection(cpResult);

    Dom.removeClass(this.purchaseSummarySection, "Loading");
    Dom.emitEvent("p:PurchaseSummaryLoaded", this.node(), {});

    this._setLoadingStatus("PurchaseSummary", false);
};

CheckoutStepPayment.prototype._buildPurchaseDisplayItems = function (items) {
    var result = [];

    var prevModuleId;
    items.forEach(function (item) {
        result.push({
            moduleId: item.moduleId,
            name: item.moduleDisplayName,
            description: item.itemSummary || "",
            price: item.totalAmountBeforeDiscount,
            firstItemOfModule: prevModuleId !== item.moduleId
        });
        prevModuleId = item.moduleId;

        if (item.moduleLogicDiscountSummary && item.moduleLogicDiscountSummary.amount) {
            result.push({
                moduleId: item.moduleId,
                name: item.moduleDisplayName + " Discounts",
                description: item.moduleLogicDiscountSummary.summary || "",
                price: item.moduleLogicDiscountSummary.amount
            });
        }
    });

    return result;
};

CheckoutStepPayment.prototype._onPaymentMethodChanged = function (selectedMethod, event, fromUI) {
    if (!selectedMethod) return;
    this._requestCheckoutPayment();
    this._toggleAutoPayCardButton(selectedMethod);
};

CheckoutStepPayment.prototype._buildProcessParams = function () {
    var selectedMethod = this.paymentMethodWidget.getSelection();
    if (!selectedMethod) return null;

    var processParams = {};
    processParams.paymentMethod = selectedMethod.paymentMethod.name;

    if (selectedMethod.paymentMethod.name == this.paymentMethodWidget.getPaymentMethodByName("CreditCard").name) {
        if (!selectedMethod.card) return null;
        processParams.vaultTokenId = selectedMethod.card.id;
    } else if (selectedMethod.paymentMethod.name == this.paymentMethodWidget.getPaymentMethodByName("ECheck").name) {
        if (!selectedMethod.bankAccount) return null;
        processParams.vaultTokenId = selectedMethod.bankAccount.id;
    } else {
        processParams.referenceCode = selectedMethod.checkNumber;
    }

    return processParams;
};
CheckoutStepPayment.prototype._renderProcessingFee = function (cpResult) {
    var info = cpResult.paymentPostingPrerequisite ? cpResult.paymentPostingPrerequisite.processingFeeResult : null;
    if (TEAM_INFO && TEAM_INFO.electronicProcessingFeeLabel) this.processingFeeName.innerHTML = TEAM_INFO.electronicProcessingFeeLabel;
    this._setPrice(this.processingFeeAmount, info && info.totalAmount);

    var hiddenProcessingFee = cpResult.paymentPostingPrerequisite == null || cpResult.paymentPostingPrerequisite.processingFeeResult == null
                                || cpResult.paymentPostingPrerequisite.processingFeeResult.totalAmount == 0;
    Dom.toggleClass(this.processingFeeSection, "Hidden", !cpResult.processingFeeVisible || hiddenProcessingFee);
};

CheckoutStepPayment.prototype._isUnappliedPaymentConsumptionSelected = function () {
    if (Dom.hasClass(this.unappliedPaymentConsumptionSection, "Hidden")) return false;
    return this.unappliedPaymentConsumption.checked;
};
CheckoutStepPayment.prototype._renderUnappliedPaymentConsumption = function (cpResult) {
    var unappliedPaymentUsable = cpResult.unappliedPaymentUsable;
    Dom.toggleClass(this.unappliedPaymentConsumptionSection, "Hidden", !unappliedPaymentUsable);
    if (!unappliedPaymentUsable) return;

    this._setPrice(this.unappliedPaymentTotalAmount, Math.abs(cpResult.unappliedPaymentAmount));

    var consumedUnappliedAmount = cpResult.paymentPostingPrerequisite ? cpResult.paymentPostingPrerequisite.consumedUnappliedAmount : null;
    this._setPrice(this.unappliedPaymentUsableAmount, consumedUnappliedAmount);

    this.unappliedPaymentConsumptionAlert._popupMessage = cpResult.unappliedPaymentAlert || "";
    Dom.toggleClass(this.unappliedPaymentConsumptionAlert, "Hidden", !this.unappliedPaymentConsumptionAlert._popupMessage);
};

CheckoutStepPayment.prototype._isAccountBalancePayoffSelected = function () {
    return this.accountBalancePayoffCheckbox.checked;
};
CheckoutStepPayment.prototype._renderAccountBalancePayoff = function (cpResult) {
    var able = cpResult.accountBalancePayoffable;
    Dom.toggleClass(this.accountBalancePayoffSection, "Hidden", !able);
    if (!able) return;

    this._setPrice(this.accountBalanceAmount, Math.abs(cpResult.accountBalanceAmount));

    if (cpResult.accountBalancePayoffRequired) {
        this.accountBalancePayoffCheckbox.checked = true;
        Dom.addClass(this.accountBalancePayoffSection, "Selected");
        Dom.disableControls(this.accountBalancePayoffCheckbox, true);
        Dom.addClass(this.accountBalancePayoffSection, "Required");

        this.accountBalancePayoffLabel.innerHTML = "Overdue account balance:";
    } else {
        this.accountBalancePayoffLabel.innerHTML = "Pay overdue account balance:";
    }
};
CheckoutStepPayment.prototype._handleAccountBalancePayoffClick = function (event) {
    if (this.checkoutPaymentResult && this.checkoutPaymentResult.accountBalancePayoffRequired) return;
    Dom.toggleClass(this.accountBalancePayoffSection, "Selected", this.accountBalancePayoffCheckbox.checked);
    this._requestCheckoutPayment();
};

CheckoutStepPayment.prototype._renderSubTotalSection = function (cpResult) {
    var shouldHide = (cpResult.subTotal === cpResult.total)
                    && (!cpResult.accountBalancePayoffable)
                    && (!cpResult.unappliedPaymentUsable || !cpResult.unappliedPaymentAmount)
                    && (!cpResult.paymentPostingPrerequisite || !cpResult.paymentPostingPrerequisite.processingFeeResult || !cpResult.paymentPostingPrerequisite.processingFeeResult.totalAmount);
    Dom.toggleClass(this.subTotalSection, "Hidden", shouldHide);
};

CheckoutStepPayment.prototype._toggleCouponCodeSection = function (show) {
    Dom.toggleClass(this.couponCodeSection, "Collapse", !show);
};

CheckoutStepPayment.prototype._handleUnappliedPaymentConsumptionClick = function (event) {
    Dom.toggleClass(this.unappliedPaymentConsumptionSection, "WithDetails", this.unappliedPaymentConsumption.checked);
    this._requestCheckoutPayment();
};

CheckoutStepPayment.prototype._processPayment = function (callback) {
    var processParams = this._buildProcessParams();
    if (this.checkoutPaymentResult.paymentMethodRequired) {
        var selectedMethod = this.paymentMethodWidget.getSelection();
        if (!selectedMethod || !selectedMethod.dataValid) {
            Dialog.error("Invalid Payment Method", "Please make sure that the selected payment method is correct.");
            return;
        }

        if (!processParams) {
            Dialog.error("Incomplete Payment Method", "Please make sure that the selected payment method is correct.");
            return;
        }
    }

    var cpDeal = {
        seenAccountBalanceAmount: this.checkoutPaymentResult.accountBalanceAmount,
        paymentPostingPrerequisite: this.checkoutPaymentResult.paymentPostingPrerequisite,
        request: {
            paymentProcessParams: this._buildProcessParams(),
            unappliedAmountConsumption: this._isUnappliedPaymentConsumptionSelected(),
            accountBalancePayoffSelected: this._isAccountBalancePayoffSelected(),
            billingInfo: this.getBillingInfo()
        }
    };
    $shoppingCartService.performCheckout(cpDeal,
                            function(response) {
                                callback(response);
                                Dom.emitEvent("p:ShoppingCartCheckoutFinished", document.body, {});
                            }.bind(this),
                            function(error) {
                                if (error && error.code == "shoppingcart.outdated") {
                                    Dialog.error("Your shopping cart is out of date.", "Please refresh the page to update new changes.");
                                    return;
                                }

                                if (error && error.code == "shoppingcart.new_account.payment_failed") {
                                    this._refreshAllPaymentMethodList();
                                }
                                console.log("Error:", error);
                                widget.namespaces.finance.LayoutUtil.alertHtmlMessage("Error", (error && error.message) || (typeof(error) == "string" && error) || "Unknown exception");
                            }.bind(this), "Checking out...").withAsyncHandler(widget.namespaces.finance.AsyncHandler.getPaymentProcessingHandler());
};

CheckoutStepPayment.prototype._configureChipList = function (chipList) {
    chipList.createChipView = function (item) {
        var className = "Item";
        if (!item.valid) className += " Invalid";
        return Dom.newDOMElement({
            _name: "hbox",
            "class": className,
            tabindex: 0,
            _children: [
                {_name: "span", _html: this.renderer(item, true)},
                {_name: "icon", "class": "close-circle CloseIcon"}
            ]
        });
    };
    this._renderer = function (item, selected) {
        return "<hbox><span title=\"" + item.name + "\">" + Dom.htmlEncode(item.name) + "</span></hbox>";
    };

    this._source = function (term, callback) {
        callback([]);
    };
    chipList.setup(this._source, this._renderer);
};

CheckoutStepPayment.prototype.onCouponKeydown = function (event) {
    if (!this._checkoutInfo.couponSupported) return;

    if (Dom.hasClass(event.target, "AnonId_autoCompleteInput")) {
        if (event.keyCode == 13 || event.keyCode == 32) {
            var inputValue = event.target.value;
            if (!inputValue || inputValue.trim().length == 0) return;
            this.couponChipList.add({
                name: inputValue,
            }, null);
            setTimeout(function () {event.target.value = "";}, 10);
            this.submitCouponCodes();
        }
    }
};

CheckoutStepPayment.prototype.onCouponChange = function (event) {
    if (!this._checkoutInfo.couponSupported) return;

    var inputValue = event.target.value;
    if (!inputValue || inputValue.trim().length == 0) return;
    this.couponChipList.add({
        name: inputValue,
    }, null);
    this.submitCouponCodes();
    setTimeout(function () {event.target.value = "";}, 10);
}

CheckoutStepPayment.prototype.submitCouponCodes = function () {
    if (!this._checkoutInfo.couponSupported) return;

    var couponCodes = [];
    var couponItems = this.couponChipList.getItems();
    couponItems.forEach(function (coupon) {
        couponCodes.push(coupon.name);
    });
    $shoppingCartService.useCoupons(couponCodes, function(usabilityMap) {
        this._couponCodeUsabilityMap = usabilityMap;
        this._requestCheckoutPayment();
    }.bind(this),function(error) {
        //SnackBar.show((error && error.message) || error || "Unknown exception");
    });
}

CheckoutStepPayment.prototype._emitActionNameChangeEvent = function () {
    Dom.emitEvent(__pkg.EVENT_NAME_COMMIT_ACTION_NAME_CHANGE, this.node(), {});
}
CheckoutStepPayment.prototype.getStepCommitActionDisplay = function () {
    return {
        icon: "check",
        title: "Pay Now"
    };
};
CheckoutStepPayment.prototype.onStepCommitActionReady = function (callback) {
    this._onStepCommitActionReady = callback;
};
CheckoutStepPayment.prototype._handleCompomentLoadingStatusesChanged = function (event) {
    if (this._onStepCommitActionReady && !Object.keys(this._featureLoadingStatusMap).length) {
        this._onStepCommitActionReady();
        this._onStepCommitActionReady = null;
    }
};

CheckoutStepPayment.prototype._onPaymentMethodsListChanged = function (method, listChanges) {
    this._checkVisibilityOfAutoPayMethodRequirement();
};

CheckoutStepPayment.prototype._renderAutoPayMethodRequirement = function (cpResult) {
    if (!cpResult.autoPayMethodRequirement) return;

    this.autoPayRequirementTitle.innerHTML = cpResult.autoPayMethodRequirement.alertTitleHTML || "";
    this.autoPayRequirementDescription.innerHTML = cpResult.autoPayMethodRequirement.alertDescriptionHTML || "";

    Dom.removeClass(this.autoPayCardIcon, "credit-card-plus");
    Dom.removeClass(this.autoPayCardIcon, "bank");
    if (cpResult.autoPayMethodRequirement.preferredPaymentMethod == this.paymentMethodWidget.getPaymentMethodByName("CreditCard").name) {
        Dom.addClass(this.autoPayCardIcon, "credit-card-plus");
        this.autoPayCardButtonLabel.innerHTML = "Add " + "Credit Card" + "...";
    } else if (cpResult.autoPayMethodRequirement.preferredPaymentMethod == this.paymentMethodWidget.getPaymentMethodByName("ECheck").name) {
        Dom.addClass(this.autoPayCardIcon, "bank");
        this.autoPayCardButtonLabel.innerHTML = "Add Bank Account...";
    }
};

CheckoutStepPayment.prototype._checkVisibilityOfAutoPayMethodRequirement = function () {
    if (!this.checkoutPaymentResult || !this.checkoutPaymentResult.autoPayMethodRequirement) return;

    var cards = this.paymentMethodWidget.node().querySelectorAll(".PaymentMethodContentPane .AnonId_accountCardRepeaterView > .Item");
    var noCards = !cards || cards.length < 1;
    this._toggleAutoPayMethodRequirement(noCards);
    if (noCards && !this.checkoutPaymentResult.autoPayMethodOfAccountRequired) {
        this._requestCheckoutPayment(); // recheck autopay method of the account
        return;
    }

    this._toggleAutoPayCardButton(this.paymentMethodWidget.getSelection());
};

CheckoutStepPayment.prototype._toggleAutoPayMethodRequirement = function (visible) {
    Dom.toggleClass(this.autoPayMethodRequirementSection, "Hidden", !visible);
};

CheckoutStepPayment.prototype._toggleAutoPayCardButton = function (selectedMethod) {
    if (!selectedMethod || !this.checkoutPaymentResult || !this.checkoutPaymentResult.autoPayMethodRequirement) return;
    Dom.toggleClass(this.addAutoPayCardButton, "Hidden", this.checkoutPaymentResult.autoPayMethodRequirement.preferredPaymentMethod == selectedMethod.paymentMethod.name);
};

CheckoutStepPayment.prototype._handleAutoPayCardButtonClick = function (event) {
    if (!this.checkoutPaymentResult.autoPayMethodRequirement) return;

    var selector = ".PaymentMethodContentPane." + this.checkoutPaymentResult.autoPayMethodRequirement.preferredPaymentMethod + " .AddButton";
    var addButton = this.paymentMethodWidget.node().querySelector(selector);
    if (addButton) addButton.click();
};


__pkg.__export(CheckoutStepPayment);

})(widget.__getNamespaceHolder("shoppingcart"));


if (window) window.__currentScriptPath = "/v2/shoppingcart/widgets/steps/CheckoutStepUpdateAccount.js";

(function (__pkg) {
function CheckoutStepUpdateAccount(node) {
    BaseTemplatedWidget.call(this);
}
__extend(__pkg.CheckoutStepCreateAccount, CheckoutStepUpdateAccount);

CheckoutStepUpdateAccount.prototype.commitStep = function (callback) {
    this._configureValidation();
    if (!this.isAbleToCommit()) return;
    var account = {
        id: this.account.id,
        first_name: this.billingFirstNameInput.value.trim(),
        last_name: this.billingLastNameInput.value.trim(),
        email: this.account.email
    };

    account.email_opt1 = this.alternateEmail1Input.value.trim();
    account.email_opt2 = this.alternateEmail2Input.value.trim();
    account.cust_fld = this.customFieldInput.value.trim();
    account.guard1_firstname = this.guardian1FirstNameInput.value.trim();
    account.guard1_lastname = this.guardian1LastNameInput.value.trim();
    account.guard1_phone_h = this.phoneUtil.getPhoneNumberFromInput(this.guardian1HomePhoneInput.value.trim());
    account.guard1_phone_w = this.phoneUtil.getPhoneNumberFromInput(this.guardian1WorkPhoneInput.value.trim());
    account.guard1_phone_m = this.phoneUtil.getPhoneNumberFromInput(this.guardian1MobilePhoneInput.value.trim());

    account.guard2_firstname = this.guardian2FirstNameInput.value.trim();
    account.guard2_lastname = this.guardian2LastNameInput.value.trim();
    account.guard2_phone_h = this.phoneUtil.getPhoneNumberFromInput(this.guardian2HomePhoneInput.value.trim());
    account.guard2_phone_w = this.phoneUtil.getPhoneNumberFromInput(this.guardian2WorkPhoneInput.value.trim());
    account.guard2_phone_m = this.phoneUtil.getPhoneNumberFromInput(this.guardian2MobilePhoneInput.value.trim());

    account.med_carrier = this.insuranceCarrierInput.value.trim();
    account.med_carrier_phone = this.phoneUtil.getPhoneNumberFromInput(this.insurancePhoneInput.value.trim());
    account.emergency_contact = this.emergencyContactInput.value.trim();
    account.emergency_phone = this.phoneUtil.getPhoneNumberFromInput(this.emergencyPhoneInput.value.trim());

    account.address = this.billingAddressInput.value.trim();
    account.city = this.cityInput.value.trim();
    account.state = this.stateInput.value.trim();
    account.zip = this.zipCodeInput.value.trim();
    account.phone_h = this.phoneUtil.getPhoneNumberFromInput(this.phoneNumberInput.value.trim());
    account.phone_w = this.phoneUtil.getPhoneNumberFromInput(this.workPhoneNumberInput.value.trim());
    account.emergency_contact2 = this.emergencyContactInput2.value.trim();
    account.emergency_phone2 = this.phoneUtil.getPhoneNumberFromInput(this.emergencyPhoneInput2.value.trim());
    account.sms1 = !__pkg.ModuleData.isSMSEnabled ? undefined : this.phoneUtil.getPhoneNumberFromInput(this.alternateSmsInput.value.trim());
    account.sms1_carrier = !__pkg.ModuleData.isSMSEnabled ? undefined : this.alternateCarrierInput.getSelectedItem().id;
    account.skipSmsSelected = this.settingInfo.smsRequired && this.offSmsCheckbox.checked;
    
    $shoppingCartService.saveAccountData(account, callback);
};

CheckoutStepUpdateAccount.prototype._initImpl = function () {
    var account = this.account;
    this._renderBillingInfo(this.account);
    Dom.setInnerText(this.firstNameLabel, account.first_name);
    Dom.setInnerText(this.lastNameLabel, account.last_name);
    Dom.setInnerText(this.emailLabel, account.email);

    this.alternateEmail1Input.value = account.email_opt1 || "";
    this.alternateEmail2Input.value = account.email_opt2 || "";
    this.customFieldInput.value = account.cust_fld || "";
    this.alternateSmsInput.value = account.sms1 || "";
    if (account.sms1.length > 0) {
        this.alternateCarrierInput.setEnable(true);
    }
    if (account.sms1_carrier) this.alternateCarrierInput.selectItemByKey("id", account.sms1_carrier);
    this.guardian1FirstNameInput.value = account.guard1_firstname || "";
    this.guardian1LastNameInput.value = account.guard1_lastname || "";
    this.guardian1HomePhoneInput.value = account.guard1_phone_h || "";
    this.guardian1WorkPhoneInput.value = account.guard1_phone_w || "";
    this.guardian1MobilePhoneInput.value = account.guard1_phone_m || "";

    this.guardian2FirstNameInput.value = account.guard2_firstname || "";
    this.guardian2LastNameInput.value = account.guard2_lastname || "";
    this.guardian2HomePhoneInput.value = account.guard2_phone_h || "";
    this.guardian2WorkPhoneInput.value = account.guard2_phone_w || "";
    this.guardian2MobilePhoneInput.value = account.guard2_phone_m || "";

    this.insuranceCarrierInput.value = account.med_carrier || "";
    this.insurancePhoneInput.value = account.med_carrier_phone || "";
    this.emergencyContactInput.value = account.emergency_contact || "";
    this.emergencyPhoneInput.value = account.emergency_phone || "";
    this.emergencyContactInput2.value = account.emergency_contact2 || "";
    this.emergencyPhoneInput2.value = account.emergency_phone2 || "";
    if (this.settingInfo.smsRequired) this.offSmsCheckbox.checked = account.skipSmsSelected;
};

CheckoutStepUpdateAccount.prototype._renderBillingInfo = function (info) {
    info = info || {};
    this.billingAddressInput.value = info.address || "";
    this.cityInput.value = info.city || "";
    this.stateInput.value = info.state || "";
    this.zipCodeInput.value = info.zip || "";
    this.phoneNumberInput.value = info.phone_h || "";
    this.workPhoneNumberInput.value = info.phone_w || "";
    this.billingFirstNameInput.value = info.first_name || "";
    this.billingLastNameInput.value = info.last_name || "";
    Dom.setInnerText(this.billingEmailLabel, info.email);
};

CheckoutStepUpdateAccount.prototype.getTemplatePath = function () {
    return __pkg.CheckoutStepCreateAccount.prototype.getTemplatePath();
};


__pkg.__export(CheckoutStepUpdateAccount);

})(widget.__getNamespaceHolder("shoppingcart"));


if (window) window.__currentScriptPath = "/v2/shoppingcart/widgets/ChargeDetailsDialog.js";

(function (__pkg) {
function ChargeDetailsDialog(node) {
    Dialog.call(this);
    var thiz = this;
    
    var chargeItemPopulator = function (data, binding, node) {
        binding.chargeItemName.innerHTML = data.name + ":";
        binding.chargeItemName.title = data.name + ":";
        binding.chargeItemAmount.innerHTML = data.displayAmountText;
        if (data.amount <= 0) {
            Dom.addClass(binding.chargeItemAmount, "NonCharge");
        }
    };
    
    this.chargeList.populator = function (data, binding, node) {
        node._chargeItemData = data;        
        var chargeNameHtml = "<div title=\" " + data.name + "\">" + data.name + "</div>";
        var objData = thiz.classForCharge[data.itemIds[0]];
        if (objData) {
            var moduleLogicType = parseInt(data.moduleLogicType);
            if (moduleLogicType && !isNaN(moduleLogicType)) {
                var ppi = objData["paymentPlanItems"][moduleLogicType];
                if (ppi && ppi.ratePlanId && ppi.ratePlanId > 0) {
                    chargeNameHtml += "<icon class=\"clock BillByHourIcon\"></icon>";
                }
                
                var detail = objData[data.refId];
                if (detail && (detail.existingMemberId > 0 || detail.newMemberId > 0)) {
                    Dom.addClass(binding.chargeName, "HasMember");
                } else {
                    Dom.removeClass(binding.chargeName, "HasMember");
                }
            }
        }
        binding.chargeName.innerHTML = chargeNameHtml;
        binding.chargeItemList.populator = chargeItemPopulator;
        binding.chargeItemList.setItems(data.chargeItems);
    };
    
    this.bind("click", this.chargeListClickedHandler, this.viewContainer);
    this.bind("click", this.viewRateChartLinkClickedHandler, this.viewRateChartLink);
    
    InfoTip.install(this.ratePlanContent, {
        match: function (node) {
            return Dom.hasClass(node, "RatePlanFeeHintText");
        },
        getMessage: function (target) {
            return Dom.newDOMElement({
                _name: "div",
                _html: "You will be charged " + target.getAttribute("ratePlanFee") + " once for all classes in this rate plan."
            })
        }
    });
}
__extend(Dialog, ChargeDetailsDialog);

ChargeDetailsDialog.prototype.setup = function (options) {
    this.options = options;
    this.title = "Charge Details";
    this.showChargeDetails(options.itemIds, options.shoppingCart, options.filter);
    
};

ChargeDetailsDialog.prototype.showChargeDetails = function (itemIds, shoppingCart, filter) {
    var total = 0;
    var chargeItems = [];
    var scCharges =  [];
    var index = 0;
    var optionSelectionNeeded = false;
    var thiz = this;
    this.classForCharge = {};
    
    itemIds.forEach(function (itemId) {
        var item = null;
        for (var i = 0; i < shoppingCart.items.length; i++) {
            if (shoppingCart.items[i].id == itemId) {
                item = shoppingCart.items[i];
                if (item.moduleData && item.moduleData.classId) {
                    thiz.classForCharge[item.id] = {};
                    thiz.classForCharge[item.id]["classId"] = item.moduleData.classId;
                    thiz.classForCharge[item.id]["slot"] = item.moduleData.slot;
                    for (var j = 0; j < item.moduleData.details.length; j ++) {
                        var detail = item.moduleData.details[j];
                        thiz.classForCharge[item.id][detail.id] = detail;
                        if (!thiz.classForCharge[item.id]["paymentPlanItems"]) thiz.classForCharge[item.id]["paymentPlanItems"] = {};
                        for (var k = 0; k < detail.paymentPlanItems.length; k ++) {
                            var ppi = detail.paymentPlanItems[k];
                            if (ppi.ratePlanId && ppi.ratePlanId > 0) {
                                thiz.classForCharge[item.id]["paymentPlanItems"][ppi.id] = ppi;
                            }
                        }
                    }
                }
                optionSelectionNeeded || (optionSelectionNeeded = item.optionSelectionNeeded);
                break;
            }
        }
        index++;
        var charges = [];
        shoppingCart.moduleSummaries.forEach(function (summary) {
            summary.calculationResult.charges.forEach(function (charge) {
                if (scCharges.indexOf(charge) < 0 && charge.itemIds.indexOf(itemId) >= 0) {
                    scCharges.push(charge);
                    if (!filter || filter(charge, itemId)) charges.push(charge);
                }
            });
        });
        var messages = charges.map(function (charge) {
            var details = charge.chargeItems.map(function (chargeItem) {
                total += (item.optionSelectionNeeded && (chargeItem.amount == -1)? 0 : chargeItem.amount);
                chargeItem.displayAmountText = __pkg.getDisplayAmountWithOption(chargeItem.amount, !item? false: item.optionSelectionNeeded);
            });
        });
        chargeItems = chargeItems.concat(charges);
    });
    this.chargeList.setItems(chargeItems);
    this.totalAmount.innerHTML = __pkg.getDisplayAmountWithOption(total, optionSelectionNeeded);
};

ChargeDetailsDialog.prototype.hashCode = function (text) {
    var hash = 0, i, chr;
    if (text.length === 0) return hash;
    for (i = 0; i < text.length; i++) {
        chr = text.charCodeAt(i);
        hash = ((hash << 5) - hash) + chr;
        hash |= 0;
    }
    return hash;
};

ChargeDetailsDialog.prototype.chargeListClickedHandler = function (event) {
    var billByHourIcon = Dom.findUpward(event.target, {
        eval: function (n) {
            return Dom.hasClass(n, "BillByHourIcon");
        },
    });
    if (billByHourIcon) {
        var _chargeItemData = Dom.findUpwardForData(billByHourIcon, "_chargeItemData");
        this.viewRatePlan(_chargeItemData, billByHourIcon);
    }
};

ChargeDetailsDialog.prototype.viewRatePlan = function (_chargeItemData, target) {
    if (!_chargeItemData) return;
    var classForCharge = this.classForCharge[_chargeItemData.itemIds[0]];
    if (!classForCharge) return;
    var refData = classForCharge[_chargeItemData.refId];
    if (!refData) return;    
    var thiz = this;
    
    var moduleLogicType = parseInt(_chargeItemData.moduleLogicType);
    if (!moduleLogicType || isNaN(moduleLogicType)) return;
    
    $classRegShoppingService.projectPaymentPlanOfCartItem(refData.id, function (res) {
        thiz.usedRatePlan = {};
        for (var i = 0; i < res.length; i ++) {
            var paymentPlanItem = res[i].paymentPlanItem;
            if (paymentPlanItem.id == moduleLogicType) {
                thiz.usedRatePlan = paymentPlanItem.ratePlan;
                var projectedRatePlan = res[i].projectedRatePlan;
                thiz.showRatePlanInfo(projectedRatePlan, target);
            }
        }
    }, function (err) {}, "Loading...");
};

ChargeDetailsDialog.prototype.showRatePlanInfo = function (projectedRatePlan, target) {
    if (!projectedRatePlan) return;
    if (!target) return;
    
    this.minutePerWeek.innerHTML = projectedRatePlan.totalHoursProjectedClass + " minutes per week";
    this.totalHours.innerHTML = projectedRatePlan.totalHoursAllClasses + " minutes per week";
    this.ratePlanNameLabel.innerHTML = "Rate Plan " + projectedRatePlan.ratePlanName + ":";
    this.ratePlanFee.innerHTML = Util.toCurrency(projectedRatePlan.appliedRatePlanItemAmount) + "/month";
    this.ratePlanFeeHint.setAttribute("ratePlanFee", Util.toCurrency(projectedRatePlan.appliedRatePlanItemAmount));
    this.ratePlanPopup.show(target, "right", "bottom", -20, 5, true);
    this.workingRatePlanTarget = target;
};

ChargeDetailsDialog.prototype.viewRateChartLinkClickedHandler = function () {
    if (!this.usedRatePlan) return;
    if (!this.workingRatePlanTarget) return;
    this.ratePlanPopup.hide();
    this.viewRateChart(this.usedRatePlan, this.workingRatePlanTarget);
};

ChargeDetailsDialog.prototype.viewRateChart = function (ratePlan, target) {
    var ratePlanOptions = {
        ratePlanName: ratePlan.name,
        ratePlanItems: ratePlan.items
    };
    widget.__ensureNamespaceLoaded("clpayplan", function (clpayplan) {
        new clpayplan.ViewRateChartDialog().callback(function(data) {            
        }).open(ratePlanOptions);        
    });
};

ChargeDetailsDialog.prototype.getDialogActions = function () {
    var thiz = this;
    return  [
        {
            type: "cancel", title: "Close",
            isCloseHandler: true,
            run: function () {
                return true;
            }
        }
    ];
};


__pkg.__export(ChargeDetailsDialog);

})(widget.__getNamespaceHolder("shoppingcart"));


if (window) window.__currentScriptPath = "/v2/shoppingcart/widgets/CheckoutLoginDialogSSO.js";

(function (__pkg) {
function CheckoutLoginDialogSSO(node) {
    Dialog.call(this);
    this.title = "Login / Create Account";

    // this.bind("click", function () {
    //     this.navigateTo(this._options.loginURL);
    // }, this.loginButton);
    
    this.bind("click", function () {
        this.navigateTo(this._options.createAccountURL);
    }, this.createAccountButton);
}
__extend(Dialog, CheckoutLoginDialogSSO);

CheckoutLoginDialogSSO.prototype.setup = function (options) {
    this._options = options;
};

CheckoutLoginDialogSSO.prototype.navigateTo = function (url) {
    window.defaultIndicator.busy();
    window.location.href = url;
}

CheckoutLoginDialogSSO.prototype.getDialogActions = function () {
    var thiz = this;
    return  [
        {
            type: "cancel", title: "Cancel",
            isCloseHandler: true,
            applicable: false,
            run: function () {
                return true;
            }
        }
    ];
};


__pkg.__export(CheckoutLoginDialogSSO);

})(widget.__getNamespaceHolder("shoppingcart"));


if (window) window.__currentScriptPath = "/v2/shoppingcart/widgets/CheckoutSuccessView.js";

(function (__pkg) {
function CheckoutSuccessView(options) {
    BaseTemplatedWidget.call(this);
    this.bind("click", this._printOrder, this.printOrderButton);
}
__extend(BaseTemplatedWidget, CheckoutSuccessView);

CheckoutSuccessView.prototype.onAttached = function (first) {
    if (!first) return;
    var url = __pkg.ModuleData.teamLogoUrl || typeof(CONTEXT) != "undefined" ? CONTEXT.teamLogoUrl : typeof(ADMIN_CONTEXT) != "undefined" ? ADMIN_CONTEXT.teamLogoUrl : "";
    this.teamLogoImage.src = url;
    Dom.toggleClass(this.teamInfoPane, "NoLogo", !url || url.length == 0);
}
CheckoutSuccessView.prototype.addExtraView = function (view) {
    view.into(this.extraCheckoutInfoView);
}
CheckoutSuccessView.prototype.init = function (result) {
    this._checkoutResult = result;
    var thiz = this;
    Dom.setInnerText(this.accountName, result.fullName);
    Dom.setInnerText(this.summaryTotalAmount, Util.toCurrency(result.totalPaymentAmount));
    Dom.setInnerText(this.orderNumber, result.orderCode);

    $shoppingCartService.getPostCheckoutMessages(this._checkoutResult.shoppingCartId, function (items) {
        if (!items || items.length == 0) {
            Dom.empty(thiz.postCheckoutMessages);
            return;
        }
        Dom.empty(thiz.postCheckoutMessages);
        for (var i = 0; i < items.length; i++) {
            var postCheckoutMessage = items[i];
            var m = Dom.newDOMElement({
                _name: "vbox",
                "class": "MessageItem",
                _children: [
                    {_name: "h2", _text: postCheckoutMessage.title || ""},
                    {_name: "vbox", _html: postCheckoutMessage.content || ""}
                ]
            });
            thiz.postCheckoutMessages.appendChild(m);
        }
    }, "Loading...");
}
CheckoutSuccessView.prototype._printOrder = function () {
    if (Util.isMobileUI() && Dom.hasClass(document.body, "Family_MobileSafari")) {
        var openFn = window._open || window.open;
        var newWindow = openFn("about:blank","_blank");
        $shoppingCartService.exportDownloadableOrderPDF(this._checkoutResult.shoppingCartId, function (fileUrl) {
            newWindow.location = fileUrl;
        }, "Loading...");
        return;
    }

    $shoppingCartService.exportDownloadableOrderPDF(this._checkoutResult.shoppingCartId, function (fileUrl) {
        widget.__ensureNamespaceLoaded("print", function (m) {
                new m.PDFExportResultDialog().open({dataURI: fileUrl});
        });
    }, "Loading...");
};


__pkg.__export(CheckoutSuccessView);

})(widget.__getNamespaceHolder("shoppingcart"));


if (window) window.__currentScriptPath = "/v2/shoppingcart/widgets/CheckoutWizardWidget.js";

(function (__pkg) {
function CheckoutWizardWidget(node) {
    BaseTemplatedWidget.call(this);

    if (Dom.getAttributeAsBoolean(node, "root-navigation", "true")) {
        CommonNavigation.setRoot(this.getNavigationModule());
        this._rootNavigation = true;
    }

    this.bind("click", this._handleHeaderClick, this.header);
    this.bind("click", this._handleNextClick, this.nextButton);
    this.bind("click", this._handleBackClick, this.backButton);
    this.bind("click", this._handleDiscardClick, this.discardButton);

    var cmsPrimarySection = document.getElementById("cms_Section_cms_Primary");
    if (cmsPrimarySection) {
        var style = window.getComputedStyle(cmsPrimarySection);
        if (style && style.padding) {

            this.titlePane.style.margin = "0px -" + style.padding + " 0px -" + style.padding;
            this.node().style.marginTop = "-" + style.padding;
        }
        //console.log("cmsPrimarySection.style.padding", style.padding);
    }

    var thiz = this;

    this._cartUpdatedEventListener = function (event) {
        if (thiz._rejectedLoadCurrentShoppingCart) {
            delete thiz._rejectedLoadCurrentShoppingCart;
            return;
        }
        if (event && event.data && event.data.mode == "Removed") {
            thiz._reload();
            return;
        }
        if (event && event.data && event.data.mode == "Updated" && event.data.reloadCheckoutInfo) {
            thiz._reload();
            return;
        }
        $shoppingCartService.getCurrentShoppingCart(function (cart) {
            if (!cart || !cart.items || !cart.items.length) {
                thiz._showEmptyCartPage();
                return;
            }
            if (thiz.info) thiz.info.shoppingCart = cart;
            thiz._displayCalculatedTotal(cart);
        });
    };

    this._displayCalculatedTotal = function (cart) {
        var optionSelectionNeeded = false;
        if (!cart.items || !cart.items.length) {
            optionSelectionNeeded =  false;
        } else {
            for (var i = 0; i < cart.items.length; i++) {
            var item = cart.items[i];
            if (item.optionSelectionNeeded) {
                optionSelectionNeeded = true;
                break;
            }
        }
        }
        Dom.setInnerText(thiz.totalAmountLabel, __pkg.getDisplayAmountWithOption(cart.calculatedTotal, optionSelectionNeeded));

    }
    this.bind("click", this._requestClose, this.closeButton);
    this.bind("click", this._requestClose, this.closeEmptyButton);
    this.bind("click", this._printOrder, this.printOrderButton);
    this.bind("click", this._showTotalAmountDetail, this.viewTotalAmountDetailAction);
    this.bind("p:CartReloaded", function (e) {
        if (!e.shoppingCart) return;
        if (thiz.info) thiz.info.shoppingCart = e.shoppingCart;
        thiz._displayCalculatedTotal(thiz.info.shoppingCart);
    });
    this._init();
}
__extend(BaseTemplatedWidget, CheckoutWizardWidget);

var coreStepHandler = {
    _map: {
        "sys:CreateAccount": __pkg.CheckoutStepCreateAccount,
        "sys:UpdateAccount": __pkg.CheckoutStepUpdateAccount,
        "sys:Agreement": __pkg.CheckoutAgreementStep,
        "sys:ConfirmAccount": __pkg.CheckoutStepConfirmAccount,
        "sys:ConfirmCart": __pkg.CheckoutStepConfirmCart,
        "sys:Payment": __pkg.CheckoutStepPayment,
    },
    renderCheckoutStep: function (step) {
        var constructorFunction = this._map[step.stepId];
        return new constructorFunction();
    }
};
var ICON_MAP = {
    "account-card": "",

};

CheckoutWizardWidget.prototype.onAttached = function (first) {
    if (!first) {
        return;
    }
    if (!this._eventsRegistered) {
        this._eventsRegistered = true;
        CommonEvent.listener("shoppingcart", "CartUpdated", this._cartUpdatedEventListener);
    }
    this.goHomeLink.href = __pkg.ModuleData.publicHomeURL || "";
    this.signInLink.href = __pkg.ModuleData.signinURL || "";
};

CheckoutWizardWidget.prototype.onDetached = function () {
    if (this._eventsRegistered) {
        this._eventsRegistered = false;
        CommonEvent.removeEvent("shoppingcart", "CartUpdated", this._cartUpdatedEventListener);
    }
}


CheckoutWizardWidget.prototype._init = function (callback) {
    var thiz = this;
    this.header.node().setAttribute("tabindex", "0");
    this.header.populator = function (data, binding, node, index) {
        node.setAttribute("status", index < thiz._currentStepIndex ? "Completed" : (index == thiz._currentStepIndex ? "Current" : "New"));
        Dom.addClass(binding.icon, ICON_MAP[data.neutralIconName] || data.neutralIconName);
        Dom.setInnerText(binding.label, data.displayName);
        node.setAttribute("title", data.description);
        node.setAttribute("stepId", data.stepId);
        Dom.toggleClass(node, "PostCheckoutStep", data.postCheckoutStep);
        node._step = data;
    };

    this._reload();
};

CheckoutWizardWidget.prototype._reload = function () {
    var thiz = this;
    $shoppingCartService.getCheckoutInfo(function (info) {
        thiz._initWith(info);
    }, function (error) {
        if (error.code == "com.teamunify.shoppingcart.core.AccountDataRequiredException") {
            __pkg.MyShoppingCartWidget._gotoCheckoutPage(thiz.node(), function () {
                window.location.href = __pkg.ModuleData.publicHomeURL;
            });
        } else {
            _handleGenericError(error);
        }
    }, "Loading...");
};

CheckoutWizardWidget.prototype._setActiveDeck = function (deck) {
    Dom.doOnSelector(this.node(), ":scope > .Deck", function (d) {
        Dom.toggleClass(d, "Active", d == deck);
    });
};

CheckoutWizardWidget.prototype._showTotalAmountDetail = function () {
    if (!this.info || this.info.shoppingCart.items.length == 0) return;

    var itemIds = this.info.shoppingCart.items.map(function (item) {
        return item.id;
    });

    var chargeDetailsOptions = {
        itemIds: itemIds,
        shoppingCart: this.info.shoppingCart
    };
    new __pkg.ChargeDetailsDialog().callback(function (member) {
    }).open(chargeDetailsOptions);
};

CheckoutWizardWidget.prototype._showEmptyCartPage = function () {
    var thiz = this;
    if (this._isShowEmptyCartPage) return;

    this._isShowEmptyCartPage = true;
    this.shoppingLinkContainer.innerHTML = "";
    this.bind("click", function(e){
        if (!__pkg.isInBackend()) return;
        var href;
        var target = e.target || e.srcElement;
        if (target.tagName === 'A') {
            href = target.getAttribute('href');
            Dom.cancelEvent();
        }
    }, this.shoppingLinkContainer);
    if (__pkg.isInBackend()) {
        if (this._shoppingLinkClickHandler) {
            Dom.unregisterEvent(this.shoppingLinkContainer, "click", this._shoppingLinkClickHandler, false)
        }
        this._shoppingLinkClickHandler = function(e) {
            var target = Dom.getTarget(e);
            if (!target) return;
            var link = Dom.findParentByTagName(target, "a");
            if (!link) return;
            thiz._requestClose();
        };
        Dom.registerEvent(this.shoppingLinkContainer, "click", this._shoppingLinkClickHandler, false);
    }
    var index = -1;
    (function next() {
        index ++;
        if (index >= __pkg.ModuleData.modules.length) {
            thiz._setActiveDeck(thiz.emptyShoppingCartUI);
            return;
        }

        var m = __pkg.ModuleData.modules[index];
        __pkg.getModuleClientHandler(m.id, function (clientHandler) {
            var entryPoints = clientHandler.getShoppingPageEntryPoints();
            if (entryPoints && entryPoints.url) {
                thiz.shoppingLinkContainer.appendChild(Dom.newDOMElement({
                    _name: "li",
                    _children: [
                        {
                            _name: "a",
                            href: entryPoints.url,
                            target: "_self",
                            _children: [
                                {_name: "icon", "class": clientHandler.getDisplayIconName()},
                                Dom.span(m.displayName)
                            ]
                        }
                    ]
                }));
            }

            next();
        });
    })();

};

CheckoutWizardWidget.prototype._printOrder = function () {
    if (Util.isMobileUI() && Dom.hasClass(document.body, "Family_MobileSafari")) {
        var openFn = window._open || window.open;
        var newWindow = openFn("about:blank","_blank");
        $shoppingCartService.exportDownloadableOrderPDF(this._checkoutResult.shoppingCartId, function (fileUrl) {
            newWindow.location = fileUrl;
        }, "Loading...");
        return;
    }

    $shoppingCartService.exportDownloadableOrderPDF(this._checkoutResult.shoppingCartId, function (fileUrl) {
        widget.__ensureNamespaceLoaded("print", function (m) {
                new m.PDFExportResultDialog().open({dataURI: fileUrl});
        });
    }, "Loading...");
};

CheckoutWizardWidget.prototype._showDoneUI = function (result) {
    var thiz = this;
    this._checkoutResult = result;
    Dom.setInnerText(this.accountName, result.fullName);
    Dom.setInnerText(this.summaryTotalAmount, Util.toCurrency(result.totalPaymentAmount));
    Dom.setInnerText(this.orderNumber, result.orderCode);
    Dom.toggleClass(this.node(), "DoneWithNewAccount", result.withNewAccount);
    this._setActiveDeck(this.doneUI);
    this.accountName.scrollIntoView();
    
    if (this._rootNavigation) {
     	CommonNavigation.onNavigateToChildModule(this._navigationModule, "sys:Done", CommonNavigation.newUnnavigatableModule());
    }
    $shoppingCartService.getPostCheckoutMessages(this._checkoutResult.shoppingCartId, function (items) {
        if (!items || items.length == 0) {
            Dom.addClass(thiz.defaultPostCheckoutMessage, "Active");
            Dom.empty(thiz.postCheckoutMessages);
            return;
        }
        Dom.removeClass(thiz.defaultPostCheckoutMessage, "Active");
        Dom.empty(thiz.postCheckoutMessages);
        for (var i = 0; i < items.length; i++) {
            var postCheckoutMessage = items[i];
            var m = Dom.newDOMElement({
                _name: "vbox",
                "class": "MessageItem",
                _children: [
                    {_name: "h2", _text: postCheckoutMessage.title || ""},
                    {_name: "vbox", _html: postCheckoutMessage.content || ""}
                ]
            });
            thiz.postCheckoutMessages.appendChild(m);
        }
    }, "Loading...");

};
CheckoutWizardWidget.prototype._initWith = function (info) {
    this.info = info;
    if (!info || !info.shoppingCart || info.shoppingCart.items.length == 0) {
        this._showEmptyCartPage();
    } else {
        var hasPostCheckoutStep = false;
        for (var s = 0; s < info.steps.length; s ++) {
            var step = info.steps[s];
            if (step.postCheckoutStep) {
                hasPostCheckoutStep = true;
                break;
            }
        }
        var paid = info.shoppingCart.checkedOutAt != null;

        // find current step
        var lastValidConfirmedIndex = -1;
        for (var i = 0; i < info.shoppingCart.confirmedStepIds.length; i ++) {
            var stepId = info.shoppingCart.confirmedStepIds[i];
            if (i < info.steps.length && info.steps[i].stepId === stepId) {
                lastValidConfirmedIndex = i;
            } else {
                break;
            }
        }
        this._displayCalculatedTotal(info.shoppingCart);

        //this._currentStepIndex = lastValidConfirmedIndex + 1;
        this._currentStepIndex = (lastValidConfirmedIndex + 1 < info.steps.length) ? lastValidConfirmedIndex + 1 : lastValidConfirmedIndex;
        this._currentStep = (this._currentStepIndex < info.steps.length) ? info.steps[this._currentStepIndex] : null;
        this._previousStepId = this._currentStepIndex > 0 ? (info.steps[this._currentStepIndex - 1].stepId) : null;

        if (paid && !hasPostCheckoutStep) {
            this._rejectedLoadCurrentShoppingCart = true;
            $shoppingCartService.markStepCompleted(this._currentStep.stepId, function () {
                this._showDoneUI(info.shoppingCart.checkoutResult);
                Dom.emitEvent("p:ShoppingCartCheckoutFinished", document.body, {});
            }.bind(this), "Loading...");
            return;
        }

        this._setActiveDeck(this.mainUI);
        this.header.node().focus();
        this._displayCalculatedTotal(this.info.shoppingCart);
        // Dom.setInnerText(this.totalAmountLabel, Util.toCurrency(info.shoppingCart.calculatedTotal));
        Dom.toggleClass(this.node(), "AtFirstStep", this._previousStepId ? false : true);
        this.header.setItems(info.steps);
        Dom.toggleClass(this.header.node(), "TotalStepsMoreThan4", info.steps && info.steps.length > 4 ? true : false);
        Dom.toggleClass(this.mainUI, "HasPostCheckoutStep", hasPostCheckoutStep);
        Dom.toggleClass(this.mainUI, "Paid", paid);
        this._loadCurrentStep();
    }
}

CheckoutWizardWidget.prototype._handleHeaderClick = function (event) {
    var headerNode = Dom.findParentWithProperty(event.target, "_repeaterData");
    if (!headerNode) return;

    var step = headerNode._repeaterData;

    var thiz = this;
    if (this.info.shoppingCart.confirmedStepIds && this.info.shoppingCart.confirmedStepIds.indexOf(step.stepId) >= 0) {
        $shoppingCartService.moveBack(step.stepId, function (info) {
            thiz._initWith(info);
        }, "Loading...");
    }
};

CheckoutWizardWidget.prototype._loadCurrentStep = function () {
    var thiz = this;
    function launchView(stepHandler) {
        thiz.contentPane.innerHTML = "";

        thiz._currentStepHandler = stepHandler;

        var doWithStepView = function (stepView) {
            if (stepView.onStepCommitActionReady) {
                thiz._disableCommitAction();
                stepView.onStepCommitActionReady(thiz._enableCommitAction.bind(thiz));
            } else {
                thiz._enableCommitAction();
            }

            stepView.into(thiz.contentPane);
            Dom.addClass(stepView.node(), "StepView");
            stepView._step = thiz._currentStep;
            thiz._currentStepView = stepView;

            if (stepView.init) stepView.init(thiz._currentStep, thiz.info, thiz);

            var display = stepView.getStepCommitActionDisplay ? stepView.getStepCommitActionDisplay() : {title: "Next"};
            Dom.setInnerText(thiz.nextButton.querySelector("span"), display.title);
            thiz.nextButton.querySelector("icon").setAttribute("class", display.icon || "chevron-right");

            thiz.mainUI.setAttribute("currentStepId", thiz._currentStep.stepId);
            thiz.mainUI.setAttribute("isPostCheckoutStep", ("" + thiz._currentStep.postCheckoutStep));

        };
        var sView = stepHandler.renderCheckoutStep(thiz._currentStep);
        if (typeof(sView) == "string" && sView.match(/([a-z0-9]+):([a-z0-9]+)/gi)) {
            var ns = RegExp.$1;
            var clazz = RegExp.$2;
            widget.createWidgetAsync(ns, clazz, {}, function (view) {
                doWithStepView(view);
            });
        } else {
            doWithStepView(sView);
        }
    }

    Dom.setInnerText(this.progressLabel, "Step " + (this._currentStepIndex + 1) + " of " + this.info.steps.length);
    Dom.setInnerText(this.stepName, this._currentStep.displayName);

    if (!this._currentStep.ownerModuleId) {
        launchView(coreStepHandler);
    } else {
        __pkg.getModuleClientHandler(this._currentStep.ownerModuleId, function (clientHandler) {
            launchView(clientHandler);
        });
    }
    
    var currentNode = this.header.node().querySelector("*[status='Current']");
    if (currentNode) currentNode.scrollIntoView();
    
    this.notifyStepChange();

    return true;
};

CheckoutWizardWidget.prototype.notifyStepChange = function () {
    Dom.emitEvent("p:StepChange", this.node());
}

CheckoutWizardWidget.prototype.getNavigationModule = function () {
    if (this._navigationModule) return this._navigationModule;

    var thiz = this;
    this._navigationModule = {
        navigate: function (name, callback) {
            callback();
        },
        close: function () {},
        onFinishAsLeaf: function (callback) {
            callback();
        }
    };

    this.addEventListener("p:StepChange", function (e) {
        CommonNavigation.onNavigateToChildModule(thiz._navigationModule, thiz._currentStep.stepId, CommonNavigation.newUnnavigatableModule());
    }, false);

    return this._navigationModule;
};
CheckoutWizardWidget.prototype.addMember = function (regSetting, callback) {
    new __pkg.NewMemberDialog().callback(function (newMember) {
        callback(newMember);
    }).open({regSetting: regSetting});
};
CheckoutWizardWidget.prototype.editNewMember = function (member, regSetting, callback) {
    new __pkg.NewMemberDialog().callback(function (newMember) {
        callback(newMember);
    }).open({member: member, regSetting: regSetting});
};
CheckoutWizardWidget.prototype.editMember = function (member, regSetting, callback) {
    new __pkg.MemberInfoDialog().callback(function (member) {
        callback(member);
    }).open({member: member, regSetting: regSetting});
};
CheckoutWizardWidget.prototype.deleteNewMember = function (id, callback) {
    $shoppingCartService.deleteNewMember(id, callback);
};
CheckoutWizardWidget.prototype.updateMemberCustomField = function (member, regSetting, errorMessage, callback) {
    new __pkg.UpdateMemberCustomFieldDialog().callback(function (member) {
        callback(member);
    }).open({member: member, regSetting: regSetting, errorMessage: errorMessage});
};

CheckoutWizardWidget.prototype._handleNextClick = function () {
    if (this._isCommitActionDisabled()) return;

    var thiz = this;
    this._currentStepView.commitStep(function (result) {
        var hasPostCheckoutStep = result && result.hasPostCheckoutStep;
        if (thiz._currentStep.stepId == "sys:Payment" && !hasPostCheckoutStep) {
            thiz._rejectedLoadCurrentShoppingCart = true;
            thiz._showDoneUI(result);
        } else {
            var lastPostCheckoutStep = thiz._currentStep.postCheckoutStep && thiz._currentStepIndex == thiz.info.steps.length - 1;
            //console.log("Commit  lastPostCheckoutStep ", lastPostCheckoutStep);
            if (lastPostCheckoutStep) {
                thiz._rejectedLoadCurrentShoppingCart = true;
            }
            $shoppingCartService.markStepCompleted(thiz._currentStep.stepId, function () {
                if (lastPostCheckoutStep) {
                    //console.log("Reload sc instance ", thiz.info.shoppingCart.id)
                    $shoppingCartService.getShoppingCartArchivedReason(thiz.info.shoppingCart.id, function (reason) {
                        //console.log("Data ", sc);
                        if (reason == 'Commited') {
                            //console.log("Switch to done ", sc);
                            thiz._showDoneUI(thiz.info.shoppingCart.checkoutResult);
                            Dom.emitEvent("p:ShoppingCartCheckoutFinished", document.body, {});
                        } else {
                            //console.log("Not commited, reload");
                            thiz._reload();
                        }
                    }, "Loading...");
                } else {
                    //console.log("Continue reload...");
                    thiz._reload();
                }
            }, "Saving...");
        }
    });
};

CheckoutWizardWidget.prototype._handleBackClick = function () {
    if (!this._previousStepId) return;

    var thiz = this;
    $shoppingCartService.moveBack(this._previousStepId, function (info) {
        thiz._initWith(info);
    }, "Loading...");
};
CheckoutWizardWidget.prototype._requestClose = function () {
    if (__pkg.isInBackend()) {
        Dom.emitEvent("p:ViewClose", this.node());
    } else {
        window.location.href = __pkg.ModuleData.publicHomeURL;
    }
}

CheckoutWizardWidget.prototype._handleDiscardClick = function () {
    var thiz = this;
    Dialog.confirmDangerousAction("Discard and Start Over?", "You can choose to discard and start over with an empty shopping cart.",
        "Discard and Start Over", function () {
            $shoppingCartService.discardShoppingCart(function () {
                if (__pkg.isInBackend()) {
                    thiz._showEmptyCartPage();
                } else {
                    thiz._rejectedLoadCurrentShoppingCart = true;
                    window.location.href = __pkg.ModuleData.publicHomeURL;
                }
            }, "Updating...");
        },
    "Cancel", null);
};

CheckoutWizardWidget.prototype._disableCommitAction = function () {
    this.nextButton.setAttribute("disabled", "disabled");
};
CheckoutWizardWidget.prototype._enableCommitAction = function () {
    this.nextButton.removeAttribute("disabled");
};
CheckoutWizardWidget.prototype._isCommitActionDisabled = function () {
    return this.nextButton.getAttribute("disabled");
};


__pkg.__export(CheckoutWizardWidget);

})(widget.__getNamespaceHolder("shoppingcart"));


if (window) window.__currentScriptPath = "/v2/shoppingcart/widgets/NewMemberDialog.js";

(function (__pkg) {
function NewMemberDialog(node) {
    Dialog.call(this);
    this.title = "Add New Member";
    var thiz = this;
    this.bind("p:ValueUpdated", function() {
        thiz.ageLabel.innerHTML = thiz.getAge(thiz.dobInput.getDate(), thiz.regSetting.ageTime);
    }, this.dobInput.node());
}
__extend(Dialog, NewMemberDialog);

NewMemberDialog.prototype.asyncSetup = function (options, done) {
    $shoppingCartService.getMemberDataOptions(function(memberDataOptions) {
        this.memberDataOptions = memberDataOptions;
        this._setup(options);
        done();
    }.bind(this), function(error) {
        Dialog.error(error.message);
        this.close();
    }, "Loading...");
}
NewMemberDialog.prototype._setup = function (options) {
    this._options = options || {};
    this.regSetting = this._options.regSetting || {};

    this.setAsModal("mainContentWrapper");
    this.genderCombo.renderer = function (gender) {
        return gender ? gender.displayName : "";
    };
    this.genderCombo.comparer = function (a, b) {
        if (!a) return !b;
        if (!b) return false;
        return a.type == b.type;
    };
    this.genderCombo.setItems(
        [].concat(Object.keys(Gender).filter(function(k) { return k != "Mixed";}).map(function(k) { return Gender[k]; })),
        "dont-select"
    );

    this.suffixCombo.renderer = function(data, forDisplaySelected) {
        return data + "";
    };
    this.suffixCombo.comparer = function(a, b) {
        return a === b;
    }
    this.suffixCombo.setItems(["\u00A0\u00A0\u00A0\u00A0"].concat(__pkg.ModuleData.ama.suffixItems));

    var isCompetitiveCategoryEnabled = __pkg.ModuleData.ama.isCompetitiveCategoryEnabled;
    if (isCompetitiveCategoryEnabled) {
        this.competitiveCategoryCombo.renderer = function (item) {
            return item ? item.name : "";
        };
        Dom.addClass(this.competitiveCategoryComboWrapper, "CompetitiveCategoryEnabled");
        var competitiveCategories = __pkg.ModuleData.ama.competitveCategory ? Object.values(__pkg.ModuleData.ama.competitveCategory) : [];
        this.competitiveCategoryCombo.setItems(competitiveCategories, "dont-select");
    }

    Dom.toggleClass(this.customMemberFieldLabel.parentNode.parentNode, "Hidden", this.regSetting.showCustomField ? false : true);
    Dom.toggleClass(this.customMemberFieldInput.parentNode, "Required", this.regSetting.customFieldRequired ? true : false);
    Dom.setInnerText(this.customMemberFieldLabel, this.regSetting.customFieldLabel + ":");

    var preferredReq = this.regSetting.preferredReq;
    if (preferredReq == 1) {
        Dom.addClass(this.preferredFirstNameInput.parentNode, "Required");
    } else if (preferredReq == 2) {
        Dom.addClass(this.preferredFirstNameInput.parentNode, "Hidden");
    }

    var medicalReq = this.regSetting.medicalReq;
    if (medicalReq == 1) {
        Dom.addClass(this.medicalInfoInput.parentNode, "Required");
        Dom.addClass(this.medicationInput.parentNode, "Required");
    } else if (medicalReq == 2) {
        Dom.addClass(Dom.findParentWithClass(this.medicalInfoInput, "EntryGroup"), "Hidden");
        Dom.addClass(Dom.findParentWithClass(this.medicationInput, "EntryGroup"), "Hidden");
    }
    
    var swimSuitReq = this.regSetting.swimSuitReq;
    if (swimSuitReq == 1) {
        Dom.addClass(this.swimSuitSizeCombo.node().parentNode, "Required");
    } else if (swimSuitReq == 2) {
        Dom.addClass(this.swimSuitSizeCombo.node().parentNode, "Hidden");
    }

    var shirtReq = this.regSetting.shirtReq;
    if (shirtReq == 1) {
        Dom.addClass(this.shirtSizeCombo.node().parentNode, "Required");
    } else if (shirtReq == 2) {
        Dom.addClass(this.shirtSizeCombo.node().parentNode, "Hidden");
    }

    var warmupReq = this.regSetting.warmupReq;
    if (warmupReq == 1) {
        Dom.addClass(this.jacketSizeCombo.node().parentNode, "Required");
    } else if (warmupReq == 2) {
        Dom.addClass(this.jacketSizeCombo.node().parentNode, "Hidden");
    }

    var pantsReq = this.regSetting.pantsReq;
    if (pantsReq == 1) {
        Dom.addClass(this.pantSizeCombo.node().parentNode, "Required");
    } else if (pantsReq == 2) {
        Dom.addClass(this.pantSizeCombo.node().parentNode, "Hidden");
    }
    Dom.toggleClass(this.clothingGroup, "Hidden", swimSuitReq == 2 && shirtReq == 2 && warmupReq == 2 && pantsReq == 2);

    [this.swimSuitSizeCombo, this.shirtSizeCombo, this.jacketSizeCombo, this.pantSizeCombo].forEach(function (combo) {
        combo.renderer = function (size) {
            return size ? size.name : "\u00A0";
        };
        combo.comparer = function (a, b) {
            if (!a) return !b;
            if (!b) return false;
            return a.m_id == b.m_id;
        };
        combo.setItems([null].concat(this.swimSuitSizeCombo === combo ? __pkg.ModuleData.ama.swimSuiteSizes : __pkg.ModuleData.ama.shirtSizes), "dont-select");
    }.bind(this));

    if (options && options.member) {
        this._initWith(options.member);
    }
    var ageTime = this.regSetting.ageTime || new Date();
    this.ageTimeLabel.innerHTML = "As of " + FormatUtil.formatDate(ageTime, "date_standard", "local");
    window.setTimeout(function () {
        this.firstNameInput.select();
        this.firstNameInput.focus();
    }.bind(this), 200);

    if (this._isEditing()) {
        this.title = "Edit" + (this._options.member.account_id ? " " : " New ") + "Member";
    }
    var minDate = moment.tz(new Date(), TimezoneProviders.server.getTimezoneId()).year(1930).month(0).date(1).hour(0).minute(0).second(0).millisecond(0);
    this.dobInput.setMinDate(minDate);

    Dom.toggleClass(this.middleNameEntry, "Required", this.isMiddleNameRequired());
    if (this.isNoMiddleNameCheckEnabled()) {
        Dom.toggleClass(this.noMiddleNameBox, "Hidden", false);
        this.bind("change", this.switchNoMiddleNameRequired, this.noMiddleNameCheck);
        if (this._isEditing() && this.middleNameInput.value == "") {
            this.noMiddleNameCheck.checked = true;
            this.switchNoMiddleNameRequired();
        }
    }

    this._configureValidation();
};

NewMemberDialog.prototype.setAsModal = function (mainParentContainerId) {
    const mainParentElement = document.getElementById(mainParentContainerId);
    // save the previous style value
    this._previousMainParentBodyElementStyle = mainParentElement?.style;
    mainParentElement?.style?.setProperty("overflow", "hidden");
    mainParentElement?.style?.setProperty("position", "fixed");
}

NewMemberDialog.prototype.unsetAsModal = function (mainParentContainerId) {
    const mainParentElement = document.getElementById(mainParentContainerId);
    if(mainParentElement) mainParentElement.style = this._previousMainParentBodyElementStyle;
}

NewMemberDialog.prototype.isNoMiddleNameCheckEnabled = function () {
    if (this.regSetting.middleNameRequired) return false;
    if (typeof(this.noMiddleNameCheck) == "undefined") return false;
    return this.memberDataOptions.noMiddleNameEnabled;
}

NewMemberDialog.prototype.isMiddleNameRequired = function () {
    return typeof(this.regSetting) != "undefined" && (this.memberDataOptions.middleNameRequired || this.regSetting.middleNameRequired);
}

NewMemberDialog.prototype.switchNoMiddleNameRequired = function () {
    if (!this.noMiddleNameCheck) return;
    var isNoMidNameSelected = this.noMiddleNameCheck.checked;
    Dom.toggleClass(this.middleNameEntry, "Required", !isNoMidNameSelected);
    Dom.toggleClass(this.middleNameInput, "Disabled", !isNoMidNameSelected);
    if(isNoMidNameSelected) {
        this.middleNameInput.setAttribute("disabled", "disabled");
        Dom.removeClass( this.middleNameInput, "CV_Invalid");
    } else {
        this.middleNameInput.removeAttribute("disabled");
    }
}

NewMemberDialog.prototype._initWith = function (member) {

    this.firstNameInput.value = (member.firstName || "").trim();
    this.middleNameInput.value = (member.middleName || "").trim();
    this.lastNameInput.value = (member.lastName || "").trim();
    this.suffixCombo.selectItemIfContains(member.suffix || "");
    this.preferredFirstNameInput.value = (member.preferredFirstName || "").trim();

    this.genderCombo.selectItemByKey("type", member.gender);
    this.cellPhoneInput.value = (member.cellPhone || "").trim();
    this.dobInput.setDate(member.dob);
    this.ageLabel.innerHTML = this.getAge(member.dob, this.regSetting.ageTime);
    if (__pkg.ModuleData.ama.isCompetitiveCategoryEnabled) this.competitiveCategoryCombo.selectItemByKey("type", member.competitiveCategory);

    this.swimSuitSizeCombo.selectItemByKey("name", member.swimSuitSize);
    this.shirtSizeCombo.selectItemByKey("name", member.shirtSize);
    this.jacketSizeCombo.selectItemByKey("name", member.jacketSize);
    this.pantSizeCombo.selectItemByKey("name", member.pantSize);

    this.physicianNameInput.value = (member.physicianName || "").trim();
    this.physicianPhoneInput.value = (member.physicianOfficePhone || "").trim();
    this.medicalInfoInput.value = (member.medicalInformation || "").trim();
    this.medicationInput.value = (member.medication || "").trim();
    this.customMemberFieldInput.value = (member.customMemberFieldValue || "").trim();

};

NewMemberDialog.prototype._configureValidation = function () {
    this.validationRules = new RuleSet()
                    .live(true);
    this.validationRules.required(this.middleNameInput, "Please enter the 'Middle Name'", function() {
        if (this.noMiddleNameCheck && this.noMiddleNameCheck.checked) return false;
        return this.isMiddleNameRequired();
    }.bind(this));

    Dom.doOnSelector(this.dialogContentNode, ".Entry.Required", function (entry) {
        if (Dom.hasClass(entry, "AnonId_middleNameEntry")) return;
        var skipRequired = Dom.hasClass(entry, "AnonId_competitiveCategoryComboWrapper") && !__pkg.ModuleData.ama.isCompetitiveCategoryEnabled;

        var input = entry.querySelector(":scope > input");
        var label = entry.querySelector(":scope > label").textContent.replace(/[ ]*:$/, "");
        if (input) {
            this.validationRules.required(input, "Please enter the '" + label + "'");
            return;
        }
        var textarea = entry.querySelector(":scope > textarea");
        if (textarea) {
            this.validationRules.required(textarea, "Please enter the '" + label + "'");
            return;
        }

        var select = entry.querySelector(":scope > button");
        if (select && select.__widget instanceof ComboManager) {
            this.validationRules.required(select.__widget, "Please enter the '" + label + "'", function () {
                return !skipRequired;
            });
            return;
        }

        var dtp = entry.querySelector(":scope > .widget_DateTimePicker");
        if (dtp && dtp.__widget instanceof DateTimePicker) {
            this.validationRules.required(dtp.__widget, "Please enter the '" + label + "'");
            return;
        }

    }.bind(this));
    this.validationRules.custom(new GenericRule(this.dobInput, function() {
        var today = new Date();
        return this.dobInput.getDate() <= today;
    }.bind(this), "Birthday" + " cannot exceed today."))
    .custom(new GenericRule(this.dobInput, function() {
        var minDate = moment.tz(new Date(), TimezoneProviders.server.getTimezoneId()).year(1930).month(0).date(1).hour(0).minute(0).second(0).millisecond(0);
        return this.dobInput.getDate() > minDate;
    }.bind(this), "'Date of Birth' is not valid."));

    widget.__ensureNamespaceLoaded("util", function (ns) {
        var rules = [];
        this.phoneUtil = ns.phoneUtil;
        rules = rules.concat(ns.phoneUtil.getSMSValidationRules("Cell Phone", this.cellPhoneInput));
        rules = rules.concat(ns.phoneUtil.getSMSValidationRules("Physician Office Phone", this.physicianPhoneInput));
        rules.forEach(function(rule) {
            this.validationRules.custom(rule);
        }.bind(this));
    }.bind(this));
};

NewMemberDialog.prototype._saveNewMember = function () {
    if (!ValidationManager.run(this.validationRules)) return;

    var newMember = {
        firstName: this.firstNameInput.value.trim(),
        middleName: this.middleNameInput.value.trim(),
        lastName: this.lastNameInput.value.trim(),
        suffix: (this.suffixCombo.getSelectedItem() + ""),
        preferredFirstName: this.preferredFirstNameInput.value.trim(),
        gender: this.genderCombo.getSelectedItem().type,
        cellPhone: this.phoneUtil.getPhoneNumberFromInput(this.cellPhoneInput.value.trim()),
        dob: this.dobInput.getDate(),
        swimSuitSize: (this.swimSuitSizeCombo.getSelectedItem() && this.swimSuitSizeCombo.getSelectedItem().name) || "",
        shirtSize: (this.shirtSizeCombo.getSelectedItem() && this.shirtSizeCombo.getSelectedItem().name) || "",
        jacketSize: (this.jacketSizeCombo.getSelectedItem() && this.jacketSizeCombo.getSelectedItem().name) || "",
        pantSize: (this.pantSizeCombo.getSelectedItem() && this.pantSizeCombo.getSelectedItem().name) || "",
        physicianName: this.physicianNameInput.value.trim(),
        physicianOfficePhone: this.phoneUtil.getPhoneNumberFromInput(this.physicianPhoneInput.value.trim()),
        medicalInformation: this.medicalInfoInput.value.trim(),
        medication: this.medicationInput.value.trim(),
        customMemberFieldValue: this.customMemberFieldInput.value.trim(),
        competitiveCategory: this.getCompetitiveCategorySelectedItem()
    };

    var thiz = this;

    if (this._isEditing()) {
        newMember.id = this._options.member.id;
        $shoppingCartService.updateNewMember(newMember, function (member) {
            thiz.close(member);
        }, "Saving...");
    } else {
        $shoppingCartService.createNewMember(newMember, function (member) {
            thiz.close(member);
        }, "Saving...");
    }
}

NewMemberDialog.prototype._isEditing = function () {
    return this._options && this._options.member && this._options.member.id;
}

NewMemberDialog.prototype.getDialogActions = function () {
    var thiz = this;
    return  [
        {
            type: "accept", title: this._isEditing() ? "Save Member" : "Add Member",
            run: function () {
                this.unsetAsModal("mainContentWrapper");
                thiz._saveNewMember();
                return false;
            }
        },
        {
            type: "cancel", title: "Cancel",
            isCloseHandler: true,
            run: function () {
                this.unsetAsModal("mainContentWrapper");
                return true;
            }
        }
    ];
};

NewMemberDialog.prototype.getAge = function (birthday, fromDate, unit) {
    if (!birthday) return 0;
    fromDate = fromDate || new Date();

    // in months
    if (1 == unit) {
        var months = 0;
        if (fromDate.getFullYear() >= birthday.getFullYear()) {
            months = (fromDate.getMonth() + (12 - birthday.getMonth())) + (fromDate.getFullYear() - 1 - birthday.getFullYear()) * 12;
            months -= (fromDate.getDate() < birthday.getDate() ? 1 : 0);
        }
        return Math.max(0, months);
    }

    // in years
    var thisYear = 0;
    if (fromDate.getMonth() < birthday.getMonth()) {
        thisYear = 1;
    } else if ((fromDate.getMonth() == birthday.getMonth()) && fromDate.getDate() < birthday.getDate()) {
        thisYear = 1;
    }
    var years = fromDate.getFullYear() - birthday.getFullYear() - thisYear;
    return Math.max(0, years);
};

NewMemberDialog.prototype.getCompetitiveCategorySelectedItem = function () {
    if (!__pkg.ModuleData.ama.isCompetitiveCategoryEnabled || !this.competitiveCategoryCombo.getSelectedItem()) return null;
    return this.competitiveCategoryCombo.getSelectedItem().type;
}

__pkg.__export(NewMemberDialog);

})(widget.__getNamespaceHolder("shoppingcart"));


if (window) window.__currentScriptPath = "/v2/shoppingcart/widgets/MemberInfoDialog.js";

(function (__pkg) {
function MemberInfoDialog(node) {
    Dialog.call(this);
    this.title = "Edit Member";
    var thiz = this;
    this.bind("p:ValueUpdated", function() {
        thiz.ageLabel.innerHTML = thiz.getAge(thiz.dobInput.getDate(), thiz.regSetting.ageTime);
    }, this.dobInput.node());
}
__extend(__pkg.NewMemberDialog, MemberInfoDialog);

MemberInfoDialog.prototype._initWith = function (member) {
    this.member = member;
    console.log("_initWith", member);
    this.firstNameInput.value = (member.first_name || "").trim();
    this.middleNameInput.value = (member.mi || "").trim();
    this.lastNameInput.value = (member.last_name || "").trim();
    this.suffixCombo.selectItemIfContains(member.suffix || "");
    this.preferredFirstNameInput.value = (member.prefer || "").trim();

    this.genderCombo.selectItemByKey("type", member.gender);
    this.cellPhoneInput.value = (member.phone || "").trim();
    this.dobInput.setDate(member.dt_dob);
    this.ageLabel.innerHTML = this.getAge(member.dt_dob, this.regSetting.ageTime);
    if (__pkg.ModuleData.ama.isCompetitiveCategoryEnabled) this.competitiveCategoryCombo.selectItemByKey("type", member.competitiveCategory);

    this.shirtSizeCombo.selectItemByKey("name", member.shirt_size);
    this.jacketSizeCombo.selectItemByKey("name", member.warmup_jacket_size);
    this.pantSizeCombo.selectItemByKey("name", member.warmup_pant_size);
    this.swimSuitSizeCombo.selectItemByKey("name", member.swimsuit_size);

    this.physicianNameInput.value = (member.med_dr_name || "").trim();
    this.physicianPhoneInput.value = (member.med_dr_phone || "").trim();
    this.medicalInfoInput.value = (member.medical_note || "").trim();
    this.medicationInput.value = (member.medication || "").trim();
    this.customMemberFieldInput.value = (member.cust_fld || "").trim();

};

MemberInfoDialog.prototype._saveMember = function () {
    if (!ValidationManager.run(this.validationRules)) return;
    var member = JSON.parse(JSON.stringify(this.member || {}));

    member.first_name = this.firstNameInput.value.trim();
    member.mi = this.middleNameInput.value.trim();
    member.last_name = this.lastNameInput.value.trim();
    member.suffix = this.suffixCombo.getSelectedItem() + "";
    member.prefer = this.preferredFirstNameInput.value.trim();
    member.gender = this.genderCombo.getSelectedItem().type;
    member.phone = this.phoneUtil.getPhoneNumberFromInput(this.cellPhoneInput.value.trim());
    member.dt_dob = this.dobInput.getDate();
    member.shirt_size = (this.shirtSizeCombo.getSelectedItem() && this.shirtSizeCombo.getSelectedItem().name) || "";
    member.warmup_jacket_size =  (this.jacketSizeCombo.getSelectedItem() && this.jacketSizeCombo.getSelectedItem().name) || "";
    member.warmup_pant_size = (this.pantSizeCombo.getSelectedItem() && this.pantSizeCombo.getSelectedItem().name) || "";
    member.swimsuit_size = (this.swimSuitSizeCombo.getSelectedItem() && this.swimSuitSizeCombo.getSelectedItem().name) || "";
    member.med_dr_name = this.physicianNameInput.value.trim();
    member.med_dr_phone = this.phoneUtil.getPhoneNumberFromInput(this.medicalInfoInput.value.trim());
    member.medical_note = this.medicalInfoInput.value.trim();
    member.medication = this.medicationInput.value.trim();
    member.cust_fld = this.customMemberFieldInput.value.trim();
    member.competitiveCategory = this.getCompetitiveCategorySelectedItem();

    var thiz = this;
    $shoppingCartService.updateMember(member, function (returnMember) {
        thiz.close(returnMember);
    }, "Saving...");
}

MemberInfoDialog.prototype.getDialogActions = function () {
    var thiz = this;
    return  [
        {
            type: "accept", title: "Save Member",
            run: function () {
                thiz._saveMember();
                return false;
            }
        },
        {
            type: "cancel", title: "Cancel",
            isCloseHandler: true,
            run: function () {
                return true;
            }
        }
    ];
};


__pkg.__export(MemberInfoDialog);

})(widget.__getNamespaceHolder("shoppingcart"));


if (window) window.__currentScriptPath = "/v2/shoppingcart/widgets/MyShoppingCartWidget.js";

(function (__pkg) {
function MyShoppingCartWidget(node) {
    BaseTemplatedWidget.call(this);

    var lazy = Dom.getAttributeAsBoolean(node, "lazy-load", false);
    if (!lazy) {
        this.load();
    }

    this._updateMap = {};
    this._pendingRemovedIds = [];
    this.bind("click", this._handleItemClick, this.moduleRepeater.node());
    this.bind("p:QuantityValueChanged", this._handleQuantityChanged, this.moduleRepeater.node());

    InfoTip.install(this.detailContainer, {
        match: function (node) {
            return Dom.hasClass(node, "AnonId_pricingDetailIcon") && node._pricingDetails;
        },
        getMessage: function (target) {
            return target._pricingDetails;
        }
    });

    InfoTip.install(this.detailContainer, {
        match: function (node) {
            return Dom.hasClass(node, "BillByHourAvailable");
        },
        getMessage: function (target) {
            return Dom.newDOMElement({
                _name: "div",
                "class": "BillByHourAvailableHintText",
                _html: "Monthly, bill by the hour, option available."
            })
        }
    });

    this.bind("click", function () {
        MyShoppingCartWidget._gotoCheckoutPage(this.node());
    }, this.checkoutNowButton);

    this.empty = true;
    this.optionSelectionNeeded = false;
}
__extend(BaseTemplatedWidget, MyShoppingCartWidget);

MyShoppingCartWidget.prototype._setup = function () {
    if (this._initialized) return;
    this._initialized = true;
    var thiz = this;

    var itemPopulator = function (data, binding, node) {
        var module = __pkg.ModuleData.moduleMap[data.moduleId];
        __pkg.getModuleClientHandler(data.moduleId, function (handler) {
            binding.itemDisplay.innerHTML = "";
            binding.itemDisplay.appendChild(handler.renderCartItemDisplay(data, "simple-cart-listing"));
            Dom.setInnerText(binding.priceLabel, Util.toCurrency(data.price));

            binding.quantityInput.setOption({min: 1});
            binding.quantityInput.setValue(data.quantity);
            binding.quantityInput.setEnable(module.quantitySupported);

            Dom.toggleClass(node, "WithQuantity", module.quantitySupported);

            binding.pricingDetailIcon._pricingDetails = data.pricingDetails;
            node._moduleHandler = handler;
            if (data.optionSelectionNeeded){
                Dom.setInnerText(binding.priceLabel, __pkg.getDisplayAmountWithOption(data.price, true));
                thiz.optionSelectionNeeded = true;
            }
        });
    };


    var groupPopulator = function (data, binding, node) {
        var moduleId = data.items[0].moduleId;
        var module = __pkg.ModuleData.moduleMap[moduleId];

        var groupName = data.key;
        if (data.billByHourAvailable) {
            groupName += "<icon class=\"clock BillByHourAvailable\"></icon>";
        }
        binding.groupName.innerHTML = groupName;
        binding.itemRepeater.populator = itemPopulator;
        binding.itemRepeater.setItems(data.items || []);

        Dom.toggleClass(node, "WithQuantity", module.quantitySupported);

        var moduleData = Dom.findUpwardForData(this.node(), "_moduleData");
        __pkg.getModuleClientHandler(moduleId, function (handler) {
            if (handler.renderExtraItems && moduleData.summary){
                var extraNode = handler.renderExtraItems(data, moduleData.summary);
                if (extraNode) {
                    binding.extraItem.appendChild(extraNode);
                    Dom.addClass(Dom.findParentWithClass(node, "ModuleGroup"), "HasItem");
                }
            }
        });
    };

    this.moduleRepeater.populator = function (data, binding, node) {
        Dom.setInnerText(binding.moduleName, __pkg.ModuleData.moduleMap[data.id].name);
        binding.groupRepeater.populator = groupPopulator;
        node._moduleData = data;
        binding.groupRepeater.setItems(data.groups || []);
    };
};
MyShoppingCartWidget.prototype.load = function () {
    var thiz = this;
    this._setup();
    delete this._cart;
    $shoppingCartService.getCurrentShoppingCart(function (cart) {
        thiz._cart = cart;
        thiz.empty = !cart || !cart.items || cart.items.length == 0;

        if (!cart || !cart.items) {
            Dom.emitEvent("p:ShoppingCartLoaded", thiz.node(), {});
            return;
        }
        __pkg.ensureCartModulesLoaded(cart, function () {
            var modules = thiz._groupItems(cart.items);
            thiz.moduleRepeater.setItems(modules);

            var count = 0;
            if (cart.items) {
                cart.items.forEach(function (item) {
                    count += item.quantity;
                });
            }

            var summary = count + " selected " + (count > 1 ? "items" : "item");
            Dom.setInnerText(thiz.headerSummary, summary);
            Dom.setInnerText(thiz.subtotalDisplay, __pkg.getDisplayAmountWithOption(cart.calculatedTotal, thiz.optionSelectionNeeded));
            Dom.emitEvent("p:ShoppingCartLoaded", thiz.node(), {});
            var paid = typeof(cart.checkedOutAt) != "undefined";
            Dom.toggleClass(thiz.detailContainer, "Paid", paid);
        });
    });
};
MyShoppingCartWidget.prototype._groupItems = function (items) {
    var modules = [];
    var moduleMap = {};

    items.forEach(function (item) {
        var module = moduleMap[item.moduleId];
        if (!module) {
            module = {
                groups: [],
                groupMap: {},
                id: item.moduleId
            };
            moduleMap[item.moduleId] = module;
            modules.push(module);
        }

        var group = module.groupMap[item.groupKey];

        if (!group) {
            group = {
                items: [],
                key: item.groupKey,
                billByHourAvailable: false
            };
            if (item.moduleData && item.moduleData.details && item.moduleData.details[0].ratePlanId > 0) {
                group.billByHourAvailable = true;
            }
            module.groupMap[item.groupKey] = group;
            module.groups.push(group);
        }

        group.items.push(item);
    });

    if (this._cart.moduleSummaries && this._cart.moduleSummaries.length > 0) {
        this._cart.moduleSummaries.forEach(function (moduleSummary) {
            var module = moduleMap[moduleSummary.moduleId];
            if (module) {
                module.summary = moduleSummary;
            }
        });
    }

    return modules;
};
MyShoppingCartWidget.prototype.getCurrentCart = function () {
    return this._cart;
};
MyShoppingCartWidget.prototype._handleItemClick = function (event) {
    var itemNode = Dom.findParentWithClass(event.target, "Item");
    var removeButton = Dom.findParentWithClass(event.target, "DeleteButton");
    if (removeButton) {
        this._handleRemoveClick(event, itemNode);
        return;
    }
};

MyShoppingCartWidget.prototype._handleQuantityChanged = function (event) {
    var itemNode = Dom.findParentWithClass(event.target, "Item");
    var quantityInput = BaseWidget.findUpward(event.target, QuantityInput);
    var item = itemNode._repeaterData;
    this._updateMap[item.id] = quantityInput.getValue();
    this._saveCartLater();
};

MyShoppingCartWidget.prototype._handleRemoveClick = function (event, itemNode) {
    var item = itemNode._repeaterData;
    Dialog.confirm("Remove '" + (itemNode._moduleHandler.getCartItemTitle(item)) + "'?", "Do you want to remove this item from your shopping cart?", "Remove", function () {
        this._pendingRemovedIds.push(item.id);
        this._saveCartLater();
    }.bind(this));
};
MyShoppingCartWidget.prototype._saveCartLater = function () {
    var thiz = this;
    if (!this._saveCartHandler) {
        this._saveCartHandler = function () {
            thiz._currentSaveTimeout = null;
            var map = {
            };

            for (var id in thiz._updateMap) {
                if (thiz._pendingRemovedIds.indexOf(id) >= 0) continue;
                map[id] = {quantity: thiz._updateMap[id], removed: false};
            }

            thiz._pendingRemovedIds.forEach(function (id) {
                map[id] = {quantity: 0, removed: true};
            });

            $shoppingCartService.batchCartUpdate(map, function () {
                thiz.load();
            }, function(e) {
                thiz._pendingRemovedIds = [];
                thiz._updateMap = {};

                var message = "Error occured when performing action.";
                if (e && e.message) message = e.message;
                Dialog.error("Error", message, function () {
                    thiz.load();
                });
            }, "Please wait...");
        }
    }

    if (this._currentSaveTimeout) {
        window.clearTimeout(this._currentSaveTimeout);
    }

    this._currentSaveTimeout = window.setTimeout(this._saveCartHandler, 1000);
}
MyShoppingCartWidget._gotoCheckoutPage = function (contextNode, onCancel) {
    $shoppingCartService.performCheckoutPreconditionCheck(function (result) {
        if (!result.loginRequired) {
            if (__pkg.isInBackend()) {
                new __pkg.ViewDialog().callback(function () {

                }).open({
                    title: "Checkout",
                    grabHeight: true,
                    viewClass: __pkg.CheckoutWizardWidget,
                    params: {"root-navigation" : "false"}
                });
            } else {
                window.defaultIndicator.busy();
                window.location.href = result.checkoutURL;
            }
        } else {
            if (__pkg.isInBackend()) return;

            if (result.accountCreationSupported) {
                // FIXME: don't assume SSO for all cases, use extension point to delegate this
                new __pkg.CheckoutLoginDialogSSO().callback(function () {
                    if (onCancel) onCancel();
                }).open(result);
            } else {
                window.defaultIndicator.busy();
                window.location.href = result.loginURL;
            }
        }

        Dom.emitEvent("p:ShoppingCartCheckoutRequested", contextNode || document.body, {});
    });
};


__pkg.__export(MyShoppingCartWidget);

})(widget.__getNamespaceHolder("shoppingcart"));


if (window) window.__currentScriptPath = "/v2/shoppingcart/widgets/ShoppingCartAccessButton.js";

(function (__pkg) {
function ShoppingCartAccessButton(node) {
    BaseTemplatedWidget.call(this);

    Dom.addClass(this.node(), "Empty");

    var lastHideAt = 0;

    this.bind("p:PopupHidden", function () {
        lastHideAt = new Date().getTime();
        Dom.removeClass(this.node(), "PopupVisible");
        this.button.style.width = "auto";
    }, this.popup.node());

    this.bind("p:PopupShown", function () {
        Dom.addClass(this.node(), "PopupVisible");
        var header = typeof(MobileHeader) != "undefined" && typeof(MobileHeader.instance) != "undefined";
        var isMobileUI = header && Util.isMobileUI();
        if (isMobileUI) {
            var w = Dom.getOffsetWidth(document.body);
            this.myShoppingCartWidget.node().style.maxWidth = w + "px";
            this.myShoppingCartWidget.node().style.width = w + "px";
            this.myShoppingCartWidget.node().style.minWidth = w + "px";
        }
    }, this.popup.node());

    this.bind("p:ShoppingCartLoaded", function () {
        Dom.removeClass(this.popupContentPane, "Loading");
        if (this.popup.isVisible()) {
            if (this.myShoppingCartWidget.empty) {
                this.popup.hide();
            } else {
                this.popup.invalidatePosition();
            }
        }
        var existedCart = this.myShoppingCartWidget.getCurrentCart() && typeof(this.myShoppingCartWidget.getCurrentCart()) != "undefined";
        if (!existedCart || this.myShoppingCartWidget.empty) {
            Dom.addClass(this.node(), "Empty");
        } else {
            Dom.removeClass(this.node(), "Empty");
        }
    }, this.myShoppingCartWidget.node());

    this.bind("p:ShoppingCartCheckoutRequested", function () {
        if (this.popup.isVisible()) {
            this.popup.hide();
        }
    }, this.myShoppingCartWidget.node());
    this.bind("p:ShoppingCartCheckoutFinished", function () {
        this.myShoppingCartWidget.load();
    }, document.body);

    this.bind("click", function () {
        var now = new Date().getTime();
        if (now < lastHideAt + 200) return;
        Dom.addClass(this.popupContentPane, "Loading");
        this.myShoppingCartWidget.load();
        this.button.style.width = Math.round(this.button.offsetWidth) + "px";
        var header = typeof(MobileHeader) != "undefined" && typeof(MobileHeader.instance) != "undefined";
        var isMobileUI = header && Util.isMobileUI();

        var showIt = function () {
            this.popup.show(this.button, "left-inside", "bottom", 0, 0, true);
        }.bind(this);

        // a brief delay to ensure any onscreen keyboard be completely hidden before
        // the popup starts calculating the window height (SESTUDIO-3492)
        if (isMobileUI) {
            window.setTimeout(showIt, 300);
        } else {
            showIt();
        }
    }, this.button);

    this._cartUpdatedEventListener = function (event) {
        if (!this.isVisible()) {
            //console.log("My parent is hidden. Skip _cartUpdatedEvent");
            return;
        }
        if (event.data.mode == "Added") {
            __pkg.getModuleClientHandler(event.data.moduleId, function (handler) {
                this._showInfo(handler.getCartUpdatedEventMessage(event));
                Dom.addClass(this.node(), "JustAdded");
                localStorage.setItem(__pkg.STORAGE_KEY_LAST_MODULE_ID, event.data ? event.data.moduleId : null);
                window.setTimeout(function () {
                    Dom.removeClass(this.node(), "JustAdded");
                }.bind(this), 250);
            }.bind(this));
        } else if (event.data.mode == "Removed" && event.data.count == 0) {
            this.myShoppingCartWidget.load();
        }
        this._updateSummary(event.data.count && event.data.count >= 0 ? {itemCount: event.data.count} : null);
    }.bind(this);

    this.progressBar.setMessage("Loading...");

    var summaryInput = null;
    if (typeof(SC_ShoppingCartButtonComponent_currentShoppingCartSummary) != "undefined") {
        summaryInput = SC_ShoppingCartButtonComponent_currentShoppingCartSummary;
    }
    this._updateSummary(summaryInput);
}
__extend(BaseTemplatedWidget, ShoppingCartAccessButton);
ShoppingCartAccessButton.prototype.isVisible = function () {
    return this.node().offsetParent != null;
};
ShoppingCartAccessButton.prototype.onAttached = function (first) {
    if (!this._eventsRegistered) {
        this._eventsRegistered = true;
        CommonEvent.listener("shoppingcart", "CartUpdated", this._cartUpdatedEventListener);
    }
    if (first) {
        if (typeof(MobileHeader) != "undefined" && typeof(MobileHeader.instance) != "undefined"
            && !window._registeredOnMobileHeader && !this._registeredOnMobileHeader) {
            MobileHeader.instance.registerMenuItem({viewClass: __pkg.ShoppingCartAccessButton});
            window._registeredOnMobileHeader = true;
        }
    }
};

ShoppingCartAccessButton.prototype.onDetached = function () {
    if (this._eventsRegistered) {
        this._eventsRegistered = false;
        CommonEvent.removeEvent("shoppingcart", "CartUpdated", this._cartUpdatedEventListener);
    }
}

ShoppingCartAccessButton.prototype._showInfo = function (message) {
    var thiz = this;

    if (this._lastSnackBar) {
        try {
            this._lastSnackBar.close();
        } catch (e) {}
    }

    var snackBarMessage = message;
    var snackBarExtraMessage = undefined;

    if (message && message.message && message.extra) {
        snackBarMessage = message.message;
        snackBarExtraMessage = message.extra;
    }

    this._lastSnackBar = SnackBar.show(snackBarMessage, "Checkout Now", function () {
        __pkg.MyShoppingCartWidget._gotoCheckoutPage();
    }, "check-circle", snackBarExtraMessage);

    this._lastSnackBar.actionButton.style.cursor = "pointer";
};

ShoppingCartAccessButton.prototype._updateSummary = function (input) {
    var thiz = this;
    var updater = function (summary) {
        if (summary && summary.itemCount > 0) {
            Dom.setInnerText(thiz.itemCountLabel, "" + summary.itemCount);
            Dom.removeClass(thiz.node(), "Empty");
        } else {
            Dom.setInnerText(thiz.itemCountLabel, "");
            Dom.addClass(thiz.node(), "Empty");
        }
    };

    if (input) {
        updater(input);
        return;
    } else {
        $shoppingCartService.getCurrentShoppingCartSummary(updater);
    }
};


__pkg.__export(ShoppingCartAccessButton);

})(widget.__getNamespaceHolder("shoppingcart"));


if (window) window.__currentScriptPath = "/v2/shoppingcart/widgets/UpdateMemberCustomFieldDialog.js";

(function (__pkg) {
function UpdateMemberCustomFieldDialog() {
    Dialog.call(this);
    this.title = "Answer Question";
    var thiz = this;

}
__extend(Dialog, UpdateMemberCustomFieldDialog);

UpdateMemberCustomFieldDialog.prototype.setup = function (options) {
    this.options = options;
    this.errorMessage.innerHTML = options.errorMessage;
    this.customMemberFieldLabel.innerHTML = options.regSetting.customFieldLabel;

    var memberWrapper = options.member;
    this.member = memberWrapper.member;
    this.isSCNewMember = memberWrapper.new;

    this.validationRules = new RuleSet()
        .live(true)
        .required(this.customMemberFieldInput, "Please enter the '" + options.regSetting.customFieldLabel + "'");

};

UpdateMemberCustomFieldDialog.prototype._saveMember = function () {
    if (!ValidationManager.run(this.validationRules)) return;
    var thiz = this;
    var member = JSON.parse(JSON.stringify(this.member || {}));

    if (this.isSCNewMember) {
        member.customMemberFieldValue = this.customMemberFieldInput.value.trim();
        $shoppingCartService.updateNewMember(member, function (returnMember) {
            thiz.close(returnMember);
        }, "Saving...");
    } else {
        member.cust_fld = this.customMemberFieldInput.value.trim();
        $shoppingCartService.updateMember(member, function (returnMember) {
            thiz.close(returnMember);
        }, "Saving...");
    }
}

UpdateMemberCustomFieldDialog.prototype.getDialogActions = function () {
    var thiz = this;
    return  [
        {
            type: "accept", title: "Save",
            run: function () {
                thiz._saveMember();
                return false;
            }
        },
        {
            type: "cancel", title: "Cancel",
            isCloseHandler: true,
            run: function () {
                return true;
            }
        }
    ];
};


__pkg.__export(UpdateMemberCustomFieldDialog);

})(widget.__getNamespaceHolder("shoppingcart"));


if (window) window.__currentScriptPath = "/v2/shoppingcart/widgets/ViewDialog.js";

(function (__pkg) {
function ViewDialog(node) {
    Dialog.call(this);
}
__extend(Dialog, ViewDialog);

ViewDialog.prototype.setup = function (options) {
    this._options = options;
    this.title = options.title || "";
    var c = options.viewClass;
    this.grabWidth = options.grabWidth || false;
    this.grabHeight = options.grabHeight || false;
    if (this.grabHeight) Dom.addClass(this.dialogBody, "GrabHeight");
    this._view = new c(this._options.params || {}).into(this.viewContainer);
    var s = Dialog.getPreferredDialogSize("xhuge");
    var size = (DIALOG_SIZE_SPECS[s] / 12) * Util.em();
    this._view.node().style.minWidth = size + "px";
    this.bind("p:ViewClose", function () {
        this.close(null);
    }, this.dialogContentNode);
};
ViewDialog.prototype.onShown = function () {
    var thiz = this;
    this.bind("p:ShoppingCartCheckoutRequested", function () {
        thiz.close(null);
    }, document.body);
}

ViewDialog.prototype.getDialogActions = function () {
    var thiz = this;
    return  [
        {
            type: "cancel", title: "Close",
            isCloseHandler: true,
            run: function () {
                return true;
            }
        }
    ];
};


__pkg.__export(ViewDialog);

})(widget.__getNamespaceHolder("shoppingcart"));

if (window) window.__currentScriptPath = null;
widget.__getNamespaceHolder("shoppingcart").__loaded = true;